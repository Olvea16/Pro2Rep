
AVRASM ver. 2.2.6  C:\Users\Oliver\Documents\GitRep\koder\Projekter\HovedProgram v1\HovedProgram v1\main.asm Sun May 14 22:53:16 2017

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.1.130\avrasm\inc\m32adef.inc'
C:\Users\Oliver\Documents\GitRep\koder\Projekter\HovedProgram v1\HovedProgram v1\main.asm(14): warning: Register r26 already defined by the .DEF directive
C:\Users\Oliver\Documents\GitRep\koder\Projekter\HovedProgram v1\HovedProgram v1\main.asm(15): warning: Register r27 already defined by the .DEF directive
C:\Users\Oliver\Documents\GitRep\koder\Projekter\HovedProgram v1\HovedProgram v1\main.asm(16): warning: Register r28 already defined by the .DEF directive
C:\Users\Oliver\Documents\GitRep\koder\Projekter\HovedProgram v1\HovedProgram v1\main.asm(17): warning: Register r29 already defined by the .DEF directive
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.1.130\avrasm\inc\m32adef.inc'
                                 
                                 ; Sidetal anviser sidenummer i ATmega32A datasheet uploadet på blackboard.
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega32A.xml ***********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m32Adef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega32A
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega32A
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M32ADEF_INC_
                                 #define _M32ADEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega32A
                                 #pragma AVRPART ADMIN PART_NAME ATmega32A
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x02
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	OCR0	= 0x3c
                                 .equ	GICR	= 0x3b
                                 .equ	GIFR	= 0x3a
                                 .equ	TIMSK	= 0x39
                                 .equ	TIFR	= 0x38
                                 .equ	SPMCR	= 0x37
                                 .equ	TWCR	= 0x36
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUCSR	= 0x34
                                 .equ	TCCR0	= 0x33
                                 .equ	TCNT0	= 0x32
                                 .equ	OSCCAL	= 0x31
                                 .equ	OCDR	= 0x31
                                 .equ	SFIOR	= 0x30
                                 .equ	TCCR1A	= 0x2f
                                 .equ	TCCR1B	= 0x2e
                                 .equ	TCNT1L	= 0x2c
                                 .equ	TCNT1H	= 0x2d
                                 .equ	OCR1AL	= 0x2a
                                 .equ	OCR1AH	= 0x2b
                                 .equ	OCR1BL	= 0x28
                                 .equ	OCR1BH	= 0x29
                                 .equ	ICR1L	= 0x26
                                 .equ	ICR1H	= 0x27
                                 .equ	TCCR2	= 0x25
                                 .equ	TCNT2	= 0x24
                                 .equ	OCR2	= 0x23
                                 .equ	ASSR	= 0x22
                                 .equ	WDTCR	= 0x21
                                 .equ	UBRRH	= 0x20
                                 .equ	UCSRC	= 0x20
                                 .equ	EEARL	= 0x1e
                                 .equ	EEARH	= 0x1f
                                 .equ	EEDR	= 0x1d
                                 .equ	EECR	= 0x1c
                                 .equ	PORTA	= 0x1b
                                 .equ	DDRA	= 0x1a
                                 .equ	PINA	= 0x19
                                 .equ	PORTB	= 0x18
                                 .equ	DDRB	= 0x17
                                 .equ	PINB	= 0x16
                                 .equ	PORTC	= 0x15
                                 .equ	DDRC	= 0x14
                                 .equ	PINC	= 0x13
                                 .equ	PORTD	= 0x12
                                 .equ	DDRD	= 0x11
                                 .equ	PIND	= 0x10
                                 .equ	SPDR	= 0x0f
                                 .equ	SPSR	= 0x0e
                                 .equ	SPCR	= 0x0d
                                 .equ	UDR	= 0x0c
                                 .equ	UCSRA	= 0x0b
                                 .equ	UCSRB	= 0x0a
                                 .equ	UBRRL	= 0x09
                                 .equ	ACSR	= 0x08
                                 .equ	ADMUX	= 0x07
                                 .equ	ADCSRA	= 0x06
                                 .equ	ADCH	= 0x05
                                 .equ	ADCL	= 0x04
                                 .equ	TWDR	= 0x03
                                 .equ	TWAR	= 0x02
                                 .equ	TWSR	= 0x01
                                 .equ	TWBR	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEWE	= 1	; EEPROM Write Enable
                                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDTOE	= 4	; RW
                                 .equ	WDDE	= WDTOE	; For compatibility
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; GICR - General Interrupt Control Register
                                 .equ	GIMSK	= GICR	; For compatibility
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	INT2	= 5	; External Interrupt Request 2 Enable
                                 .equ	INT0	= 6	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 7	; External Interrupt Request 1 Enable
                                 
                                 ; GIFR - General Interrupt Flag Register
                                 .equ	INTF2	= 5	; External Interrupt Flag 2
                                 .equ	INTF0	= 6	; External Interrupt Flag 0
                                 .equ	INTF1	= 7	; External Interrupt Flag 1
                                 
                                 ; MCUCR - General Interrupt Control Register
                                 .equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	ISC2	= 6	; Interrupt Sense Control 2
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TCCR0 - Timer/Counter Control Register
                                 .equ	CS00	= 0	; Clock Select 1
                                 .equ	CS01	= 1	; Clock Select 1
                                 .equ	CS02	= 2	; Clock Select 2
                                 .equ	WGM01	= 3	; Waveform Generation Mode 1
                                 .equ	CTC0	= WGM01	; For compatibility
                                 .equ	COM00	= 4	; Compare match Output Mode 0
                                 .equ	COM01	= 5	; Compare Match Output Mode 1
                                 .equ	WGM00	= 6	; Waveform Generation Mode
                                 .equ	PWM0	= WGM00	; For compatibility
                                 .equ	FOC0	= 7	; Force Output Compare
                                 
                                 ; TCNT0 - Timer/Counter Register
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0 - Output Compare Register
                                 .equ	OCR0_0	= 0	; 
                                 .equ	OCR0_1	= 1	; 
                                 .equ	OCR0_2	= 2	; 
                                 .equ	OCR0_3	= 3	; 
                                 .equ	OCR0_4	= 4	; 
                                 .equ	OCR0_5	= 5	; 
                                 .equ	OCR0_6	= 6	; 
                                 .equ	OCR0_7	= 7	; 
                                 
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0	= 1	; Timer/Counter0 Output Compare Match Interrupt register
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0	= 1	; Output Compare Flag 0
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 6	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	OCIE2	= 7	; Timer/Counter2 Output Compare Match Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2	= 7	; Output Compare Flag 2
                                 
                                 ; TCCR2 - Timer/Counter2 Control Register
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM21	= 3	; Clear Timer/Counter2 on Compare Match
                                 .equ	CTC2	= WGM21	; For compatibility
                                 .equ	COM20	= 4	; Compare Output Mode bit 0
                                 .equ	COM21	= 5	; Compare Output Mode bit 1
                                 .equ	WGM20	= 6	; Pulse Width Modulator Enable
                                 .equ	PWM2	= WGM20	; For compatibility
                                 .equ	FOC2	= 7	; Force Output Compare
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2 - Timer/Counter2 Output Compare Register
                                 .equ	OCR2_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2UB	= 0	; Timer/counter Control Register2 Update Busy
                                 .equ	OCR2UB	= 1	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 2	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 3	; Asynchronous Timer/counter2
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1B	= 3	; Output Compare Flag 1B
                                 .equ	OCF1A	= 4	; Output Compare Flag 1A
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	PWM10	= WGM10	; For compatibility
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	PWM11	= WGM11	; For compatibility
                                 .equ	FOC1B	= 2	; Force Output Compare 1B
                                 .equ	FOC1A	= 3	; Force Output Compare 1A
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	CTC10	= WGM12	; For compatibility
                                 .equ	CTC1	= WGM12	; For compatibility
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	CTC11	= WGM13	; For compatibility
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** USART ************************
                                 ; UDR - USART I/O Data Register
                                 .equ	UDR0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSRA - USART Control and Status Register A
                                 .equ	USR	= UCSRA	; For compatibility
                                 .equ	MPCM	= 0	; Multi-processor Communication Mode
                                 .equ	U2X	= 1	; Double the USART transmission speed
                                 .equ	UPE	= 2	; Parity Error
                                 .equ	PE	= UPE	; For compatibility
                                 .equ	DOR	= 3	; Data overRun
                                 .equ	FE	= 4	; Framing Error
                                 .equ	UDRE	= 5	; USART Data Register Empty
                                 .equ	TXC	= 6	; USART Transmitt Complete
                                 .equ	RXC	= 7	; USART Receive Complete
                                 
                                 ; UCSRB - USART Control and Status Register B
                                 .equ	UCR	= UCSRB	; For compatibility
                                 .equ	TXB8	= 0	; Transmit Data Bit 8
                                 .equ	RXB8	= 1	; Receive Data Bit 8
                                 .equ	UCSZ2	= 2	; Character Size
                                 .equ	CHR9	= UCSZ2	; For compatibility
                                 .equ	TXEN	= 3	; Transmitter Enable
                                 .equ	RXEN	= 4	; Receiver Enable
                                 .equ	UDRIE	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSRC - USART Control and Status Register C
                                 .equ	UCPOL	= 0	; Clock Polarity
                                 .equ	UCSZ0	= 1	; Character Size
                                 .equ	UCSZ1	= 2	; Character Size
                                 .equ	USBS	= 3	; Stop Bit Select
                                 .equ	UPM0	= 4	; Parity Mode Bit 0
                                 .equ	UPM1	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL	= 6	; USART Mode Select
                                 .equ	URSEL	= 7	; Register Select
                                 
                                 .equ	UBRRHI	= UBRRH	; For compatibility
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; SFIOR - Special Function IO Register
                                 .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register
                                 .equ	ADCSR	= ADCSRA	; For compatibility
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; When this bit is written to one,the Timer/Counter2 prescaler will be reset.The bit will be cleared by hardware after the operation is performed.Writing a zero to this bit will have no effect.This bit will always be read as zero if Timer/C                                 ounter2 is clocked by the internal CPU clock.If this bit is written when Timer/Counter2 is operating in asynchronous mode,the bit will remain one until the prescaler has been reset.
                                 .equ	ADFR	= ADATE	; For compatibility
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	ADTS0	= 5	; ADC Auto Trigger Source 0
                                 .equ	ADTS1	= 6	; ADC Auto Trigger Source 1
                                 .equ	ADTS2	= 7	; ADC Auto Trigger Source 2
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 ;.equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 ;.equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 ;.equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 ;.equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 .equ	SM0	= 4	; Sleep Mode Select
                                 .equ	SM1	= 5	; Sleep Mode Select
                                 .equ	SM2	= 6	; Sleep Mode Select
                                 .equ	SE	= 7	; Sleep Enable
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	MCUSR	= MCUCSR	; For compatibility
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	PSR10	= 0	; Prescaler Reset Timer/Counter1&0
                                 .equ	PSR2	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PUD	= 2	; Pull-up Disable
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCR - Store Program Memory Control Register
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write secion read enable
                                 .equ	ASRE	= RWWSRE	; For compatibility
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	ASB	= RWWSB	; For compatibility
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler bits
                                 .equ	TWPS1	= 1	; TWI Prescaler bits
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	BODEN	= 6	; Brown out detector enable
                                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x003f
                                 .equ	SRAM_START	= 0x0060
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x085f
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                                 .equ	OC2addr	= 0x0008	; Timer/Counter2 Compare Match
                                 .equ	OVF2addr	= 0x000a	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x000c	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x000e	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0010	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x0012	; Timer/Counter1 Overflow
                                 .equ	OC0addr	= 0x0014	; Timer/Counter0 Compare Match
                                 .equ	OVF0addr	= 0x0016	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0018	; Serial Transfer Complete
                                 .equ	URXCaddr	= 0x001a	; USART, Rx Complete
                                 .equ	UDREaddr	= 0x001c	; USART Data Register Empty
                                 .equ	UTXCaddr	= 0x001e	; USART, Tx Complete
                                 .equ	ADCCaddr	= 0x0020	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x0022	; EEPROM Ready
                                 .equ	ACIaddr	= 0x0024	; Analog Comparator
                                 .equ	TWIaddr	= 0x0026	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0028	; Store Program Memory Ready
                                 
                                 .equ	INT_VECTORS_SIZE	= 42	; size in words
                                 
                                 #endif  /* _M32ADEF_INC_ */
                                 
                                 
                                 
                                 ;Register
                                 .DEF Temp1 = R16	;Midlertidigt register, bruges også til interrupts.
                                 .DEF Temp2 = R17	;Midlertidigt register.
                                 .DEF Arg = R18 ;Argumentregister
                                 .DEF Ret1 = R19 ;Returregister.
                                 .DEF InBesked = R20 ;Register til besked 
                                 .DEF AccData = R21
                                 .DEF SREG2 = R22
                                 .DEF DistH = R23
                                 .DEF DistL = R24
                                 .DEF AccRefP = R25
                                 .DEF AccRefN = R26
                                 .DEF AccSumH = R27
                                 .DEF AccSumL = R28
                                 .DEF DivCounter = R29
                                 ;Vi må ikke tage R30 og R31 hvis vi gerne vil have Z (X og Y er R26 til R29) Vi skal nok samle nogel af registeren og tjekker om vi ik kan bruge Temp og Ret. Evt lave Arg om til et register vi bruger til at give verdi til subrutiner med så EEPROMSave og L                                 EDVerdi kan komme der ind
                                 ;--------------------------
                                 
                                 ;EEPROM
                                 .EQU EEPROM_AccRefP = 0x000
                                 .EQU EEPROM_AccRefN = 0x001
                                 ;Fra 0x000 til 0x3FF er gyldige  der med 1024 adresser 
                                 ;---------------------------
                                 
                                 ;Data Space
                                 
                                 .EQU Intype_DatSpac = 0x00
                                 .EQU InCmd_DatSpac = 0x01
                                 .EQU InBesked_DatSpac = 0x02
                                 .EQU ZStart = 0x04
                                 
                                 ;SREG2 Navngivning
                                 .EQU StateCount0 = 0 
                                 .EQU StateCount1 = 1
                                 .EQU StateCount2 = 2
                                 .EQU LEDTimeON = 3
                                 .EQU LastState0 = 4 
                                 .EQU LastState1 = 5 
                                 .EQU State0 = 6
                                 .EQU State1 = 7
                                 ;---------------------------
                                 
                                 ;
                                 .EQU Hyst = 10
                                 .EQU Straight = 0
                                 .EQU Turn1 = 1
                                 .EQU Turn2 = 2
                                 
                                 .EQU AccRefN_Konst = 100
                                 .EQU AccRefP_Konst = 160
                                 ;
                                 
                                 ;Protokol 
                                 .EQU Proto_SET = 0x55
                                 .EQU Proto_GET = 0xAA
                                 .EQU Proto_REPLY = 0xBB
                                 
                                 .EQU Proto_Start = 0x10
                                 .EQU Proto_Stop = 0x11
                                 .EQU Proto_PWMPre = 0x12
                                 .EQU Proto_AccRef = 0x13
                                 .EQU Proto_RGBLED = 0x14
                                 .EQU Proto_PWMStop = 0x15
                                 .EQU Proto_Track = 0x16
                                 ;---------------------------
                                 
                                 ;LED
                                 .EQU LED_Straight = 0b111111
                                 .EQU LED_Sving1 = 0b000011
                                 .EQU LED_Sving2 = 0b011000
                                 
                                 .EQU CmdIn_RGBLEDTest_LED = 3
                                 .EQU CmdIn_AccRefP_LED = 4
                                 .EQU CmdIn_AccRefN_LED = 5
                                 .EQU CmdIn_Start_LED = 6
                                 .EQU CmdIn_Stop_LED = 7
                                 .EQU CmdIn_PWMPrescaler_LED = 8
                                 ;---------------------------
                                 
                                 
                                 
                                 ;---------/\/\/\Navngivning/\/\/\---------------------------\/\/\/Kode\/\/\/---------------------------------------------------------------------------------------------------------------------------------------------------------
                                 
000000 c031                      .ORG 0			;Vektoradresse for Reset.
                                 RJMP Setup      ;Springer til setup. 
                                 
000002 940c 024b                 .ORG INT0addr
                                 JMP InteDist
                                 
000020 940c 023e                 .ORG ADCCaddr	;Dette er den for en ADC er færdig 
                                 JMP ADCDone
                                 
00000e 940c 0243                 .ORG OC1Aaddr	;Timer 1 compereA servisrutine
                                 JMP Timer1CompereA	
                                 
                                 
                                 .ORG 50			;Sætter adressen for denne linje til over 30, da dette ville være lige efter 28+2.
                                 
                                 Setup:
000032 e060                      
                                 LDI SREG2,0
                                 
000033 e008                      ;Opsætning af stack
000034 bf0e                      	LDI Temp1, HIGH(RAMEND)			;Loader højeste hukommelsesadresse (D8 til D15)(The last on-chip RAM address)
000035 e50f                      	OUT SPH,Temp1					;Gemmer i stack pointer 
000036 bf0d                      	LDI Temp1, LOW(RAMEND)			;Loader højeste hukommelsesadresse (D0 til D7)(The last on-chip RAM address)
                                 	OUT SPL,Temp1					;Gemmer i stack pointer 
                                 
000037 e400                      ;Opsætning af hardware inteerupt 
000038 bf0b                      	LDI Temp1, (1<<INT0);|(1<<INT1)		;Tænder for INT0 og INT1
000039 e002                      	OUT GICR, Temp1
00003a bf05                      	LDI Temp1, (1<<ISC01);|(1<<ISC11)	;Sætter INT0 og INT1 til at trigge på faldende signal 
00003b 9a92                      	OUT MCUCR, Temp1
                                 	SBI PORTD, 2 ;pull-up activated INT0
                                 	;SBI PORTD, 3 ;pull-up activated INT1
                                 
00003c e000                      ;Indhætning af verdier fra EEPROM
00003d e010                      LDI Temp1, HIGH(EEPROM_AccRefP)
00003e 940e 01db                 LDI Temp2, LOW(EEPROM_AccRefP)
000040 2f93                      CALL LoadFromEEPROM
000041 e000                      MOV AccRefP, Ret1
000042 e011                      LDI Temp1, HIGH(EEPROM_AccRefN)
000043 940e 01db                 LDI Temp2, LOW(EEPROM_AccRefN)
000045 2fa3                      CALL LoadFromEEPROM
                                 MOV AccRefN, Ret1
                                 ;---
                                 
000046 e108                      ;Opsætning af kommunikation
000047 b90a                      	LDI R16, (1<<TXEN)|(1<<RXEN);|(1<<RXCIE)	;Opsætter værdien til modtagelse og afsendelse af seriel data.
000048 e806                      	OUT UCSRB, R16								;Sender værdien til opsætningsregisteret, UCSRB (s. 212).
000049 bd00                      	LDI R16, (1<<UCSZ1)|(1<<UCSZ0)|(1<<URSEL)	;Her indstilles mikrokontrolleren til 8 bit data, ingen parity bit og kun 1 stop bit.
00004a e607                      	OUT UCSRC, R16								;Værdien sendes til registeret UCSRC (s. 214).
00004b b909                      	LDI R16, 0x67								;Her indstilles baud rate til 9600 (ved 16 MHz).
                                 	OUT UBRRL, R16								;Værdien for baud rate sendes til registeret UBRRL (s. 216).
                                 
00004c 9a8f                      ;Opsætning af PWM
00004d e603                      	SBI DDRD,7		;PordtD Bit7 sættes og bliver output.
00004e bd05                      	LDI R16,0x63	;(0110 0011)
00004f e000                      	OUT TCCR2,R16	;Opsætter PWM, sætter prescaleren til 1/32 (ca. 1 kHz), fasekorrekt, ikke-inverteret (s. 153).
000050 bd03                      	LDI R16,0		;
                                 	OUT OCR2,R16	;Sætter PWM til 0, via. registeret OCR2 (OCR2 = PWM * 2.55)
                                 
000051 e000                      ;Opsætning af ADC
000052 bb0a                      	LDI R16,0
000053 e80f                      	OUT DDRA, R16	;Sætter PortA 0 til indput
000054 b906                      	LDI R16,0x8F	;Tænder ADC, interrupt på og ck/128 for max præcision 0x8F(0b10001111)   0x89(10001001)=ck/2
000055 e600                      	OUT ADCSRA, R16
000056 b907                      	LDI R16,0x60	;AVCC pin som Vref og det er højre justified 0x40(0b?01000000?) 0xC0for2.45 vref
                                 	OUT ADMUX, R16
                                 
000057 9ad1                      ;Opsætning af RGB LED
000058 9ad2                      	SBI DDRA, 1
000059 9ad3                      	SBI DDRA, 2
00005a 9ad4                      	SBI DDRA, 3
00005b 9ad5                      	SBI DDRA, 4
00005c 9ad6                      	SBI DDRA, 5
                                 	SBI DDRA, 6
                                 
00005d e000                      ;Opsætning af noget af timere1
00005e bd0f                      	LDI Temp1, 0
00005f e100                      	OUT TCCR1A, Temp1 
000060 bf09                      	LDI Temp1,(1<<OCIE1A)	;Timer 1 comber med OCR1A 
000061 e30d                      	OUT TIMSK,Temp1
000062 bd0b                      	LDI Temp1, HIGH(15625-1)	;Hvor meget der skal til får at få 1 sek 
000063 e008                      	OUT	OCR1AH,Temp1
000064 bd0a                      	LDI Temp1, LOW(15625-1)		;Hvor meget der skal til får at få 1 sek 
                                 	OUT	OCR1AL,Temp1
000065 9478                      
000066 9a36                      SEI	;Enabler interrupts. 
                                 SBI ADCSRA, ADSC		;Starter conversion (ADC)
                                 ;---------------------------------------
000067 e9a6                      
000068 e694                      LDI AccRefN, 150
                                 LDI AccRefP, 100
000069 e0f0                      
00006a e0e4                      LDI ZH, HIGH(ZStart)
                                 LDI ZL, LOW(ZStart)
                                 
00006b 995f                      Auto:
00006c c04c                      SBIC UCSRA,RXC	
                                 RJMP UAuto
00006d f016                      
                                 BRBS 6, StateMachine
00006e 940c 00a9                 
                                 JMP AutoEnd
                                 
000070 940e 00ab                 	StateMachine:
000072 30d0                      	CALL AvgAcc
000073 f5a9                      	CPI DivCounter, 0
                                 	BRNE AutoEnd
000074 3a30                      
000075 f4a8                      	CPI Ret1, AccRefP_Konst
                                 	BRSH StateMachine_Turn1
000076 3634                      
000077 f110                      	CPI Ret1, AccRefN_Konst
                                 	BRLO StateMachine_Turn2
000078 363e                      
000079 f178                      	CPI Ret1, (AccRefN_Konst + Hyst)
                                 	BRLO AutoEnd
00007a 3936                      
00007b f568                      	CPI Ret1, (AccRefP_Konst - Hyst)
                                 	BRSH AutoEnd
                                 
00007c 2f06                      		StateMachine_Straight:
00007d 7c00                      		MOV Temp1,SREG2
00007e 3000                      		ANDI Temp1,0b11000000
00007f f149                      		CPI Temp1,(Straight<<State0)
                                 		BREQ AutoEnd
000080 940e 0221                 
                                 		CALL StoreTrack
000082 2f06                      
000083 730f                      		MOV Temp1, SREG2
000084 6000                      		ANDI Temp1, 0b00111111
000085 2f60                      		ORI Temp1, (Straight<<State0)
                                 		MOV SREG2, Temp1
000086 e32f                      
000087 940e 01e2                 		LDI Arg, LED_Straight
000089 940c 00a9                 		CALL SetLED
                                 		JMP AutoEnd
                                 
00008b 2f06                      		StateMachine_Turn1:
00008c 7c00                      		MOV Temp1,SREG2
00008d 3400                      		ANDI Temp1,0b11000000
00008e f0d1                      		CPI Temp1,(Turn1<<State0)
                                 		BREQ AutoEnd
00008f 940e 0221                 
                                 		CALL StoreTrack
000091 2f06                      
000092 730f                      		MOV Temp1, SREG2
000093 6400                      		ANDI Temp1, 0b00111111
000094 2f60                      		ORI Temp1, (Turn1<<State0)
                                 		MOV SREG2, Temp1
000095 e023                      
000096 940e 01e2                 		LDI Arg, LED_Sving1
000098 940c 00a9                 		CALL SetLED
                                 		JMP AutoEnd
                                 
00009a 2f06                      		StateMachine_Turn2:
00009b 7c00                      		MOV Temp1,SREG2
00009c 3800                      		ANDI Temp1,0b11000000
00009d f059                      		CPI Temp1,(Turn2<<State0)
                                 		BREQ AutoEnd
00009e 940e 0221                 
                                 		CALL StoreTrack
0000a0 2f06                      
0000a1 730f                      		MOV Temp1, SREG2
0000a2 6800                      		ANDI Temp1, 0b00111111
0000a3 2f60                      		ORI Temp1, (Turn2<<State0)
                                 		MOV SREG2, Temp1
0000a4 e128                      
0000a5 940e 01e2                 		LDI Arg, LED_Sving2
0000a7 940c 00a9                 		CALL SetLED
                                 		JMP AutoEnd
                                 
                                 AutoEnd:
0000a9 940c 006b                 
                                 JMP Auto
                                 
0000ab 94e8                      AvgAcc:	
0000ac 0fc5                      	CLT
0000ad e000                      	ADD AccSumL, AccData
0000ae 1fb0                      	LDI Temp1,0
                                 	ADC AccSumH, Temp1
                                 
0000af 3fdf                      	;Hvis tælleren er nået 255, altså 256 omgange, skal programmet gå til den sidste del af udregningen.
0000b0 f019                      	CPI DivCounter, 255
                                 	BREQ AvgAccRet 
0000b1 95d3                      
0000b2 940c 00b8                 	INC DivCounter
                                 	JMP AvgAccEnd
                                 
                                 	AvgAccRet:
0000b4 2f3b                      		;Flytter resultatet, AccSumH, til returregisteret.
                                 		MOV Ret1, AccSumH
                                 
0000b5 e0d0                      		;Nulstiller tæller og variabler.
0000b6 e0b0                      		LDI DivCounter, 0
0000b7 e0c0                      		LDI AccSumH, 0
                                 		LDI AccSumL, 0
0000b8 9508                      AvgAccEnd:
                                 RET 
                                 
                                 UAuto:
                                 
                                 
                                 StartOfProto:
0000b9 9b5f                      
0000ba 940c 0145                 SBIS UCSRA,RXC		;Tester bitten RXC, der viser, om mikrocontrolleren har modtaget en besked, i registeret UCSRA.
0000bc b14c                      JMP EndOfProto		;Hvis RXC er 0, skal programmet hoppe over telegramfortolkningen.
                                 IN InBesked,UDR		;Hvis RXC er 1, skal programmet læse og fortolke dataen i UDR.
                                 
0000bd 9130 0000                 TypeCheck:
0000bf 3030                      	LDS Ret1, Intype_DatSpac
0000c0 f421                      	CPI Ret1,0x00	;Tjekker om InType er tom.
0000c1 940e 0197                 	BRNE CmdCheck	;Hvis InType ikke er tom, hopper programmet til CmdCheck.
0000c3 940c 0145                 	CALL IsType		;Hvis InType er tom, tjekker programmet om den modtagne besked i InBesked er en type med subroutinen IsType.
                                 	JMP EndOfProto	;Derefter hopper programmet videre til efter telegramfortolkningen og fortsætter i næste omgang i main-løkken.
                                 
0000c5 9130 0001                 CmdCheck:
0000c7 3030                      	LDS Ret1, InCmd_DatSpac
0000c8 f4e9                      	CPI Ret1,0x00	;Tjekker om InCmd er tom.
0000c9 940e 01a4                 	BRNE DataCheckInter	;Hvis InCmd ikke er tom, hopper programmet til DataCheck.
0000cb 9130 0000                 	CALL IsCmd		;Hvis InCmd derimod er tom, tjekker programmet om den modtagne besked i InBesked er en kommmando med subroutinen IsCom.
0000cd 3a3a                      	LDS Ret1, Intype_DatSpac
0000ce f0c9                      	CPI Ret1, Proto_GET	;Derefter sammenligner programmet InType, altså telegrammets type, med 0xAA, altså et 'get'-telegram.
                                 	BREQ IsGet		;Hvis telegramtypen er get, hopper programmet til IsGet.
                                 
                                 	;Indsæt nye typer over dette punkt.
                                 	
0000cf 9130 0001                 					;Hvis typen ikke er nogen af de ovenstående, antager programmet at typen er 0x55, altså et 'set'-telegram. 
0000d1 3135                      	LDS Ret1, InCmd_DatSpac
0000d2 f079                      	CPI Ret1, Proto_PWMStop
0000d3 3130                      	BREQ CmdCheck_PWMStop
0000d4 f1b9                      	CPI Ret1, Proto_Start	;Programmet sammenligner telegrammets kommando med 0x10, altså 'start' eller 'hastighed'.
0000d5 3132                      	BREQ EndOfProtoInter	;Hvis kommandoen er 0x10, hopper programmet til slutningen af protokollen, så dataen til telegrammet 0x55, 0x10 kan hentes i næste omgang i løkken.
0000d6 f1a9                      	CPI Ret1, Proto_PWMPre	;Programmet sammenligner telegrammets kommando med 0x12, altså PWM'ens prescaler.
0000d7 3133                      	BREQ EndOfProtoInter ;Hvis kommandoen er 0x12, hopper programmet til slutningen af protokollen, så dataen til telegrammet 0x55, 0x12 kan hentes i næste omgang i løkken.
0000d8 f199                      	CPI Ret1, Proto_AccRef
0000d9 3134                      	BREQ EndOfProtoInter
0000da f189                      	CPI Ret1, Proto_RGBLED
                                 	BREQ EndOfProtoInter
                                 	;Indsæt nye kommandoer over dette punkt. 
                                 	
0000db 940e 0147                 					;Hvis kommandoen er ingen af de ovenstående, antager programmet at kommandoen er 0x11, altså kommandoen 'stop'.
0000dd e120                      	CALL StopCar	;Kalder subroutinen StopCar, der sætter PWM'en til 0.
0000de 940e 01ee                 	LDI Arg, 0x10	
0000e0 940c 0143                 	CALL LED1SekSet		;Tænder LED Værdien for at have modtaget et...
                                 	JMP CleanupEndOfProto	;Hopper til efter telegramfortolkningen.
                                 
0000e2 940e 0147                 	CmdCheck_PWMStop:
0000e4 940c 0143                 		CALL StopCar
                                 		JMP CleanupEndOfProto
                                 
0000e6 940c 0112                 DataCheckInter:
                                 JMP DataCheck
                                 
0000e8 9130 0001                 	IsGet:
0000ea 3132                      		LDS Ret1, InCmd_DatSpac
0000eb f061                      		CPI Ret1, Proto_PWMPre
0000ec 3133                      		BREQ CmdCheck_IsGet_IsFreq
0000ed f0f1                      		CPI Ret1, Proto_AccRef
0000ee 3134                      		BREQ EndOfProtoInter
0000ef f061                      		CPI Ret1, Proto_RGBLED
0000f0 3136                      		BREQ CmdCheck_IsGet_IsRGBLED
0000f1 f0a1                      		CPI Ret1, Proto_Track
0000f2 3130                      		BREQ CmdCheck_IsGet_Track
0000f3 f4d1                      		CPI Ret1, Proto_Start
0000f4 940e 014e                 		BRNE Error			;Sætter fejl hvis typen 0x55 ikke er sat.
0000f6 940c 0143                 		CALL SendSpeed
                                 		JMP CleanupEndOfProto
                                 
0000f8 940e 0159                 		CmdCheck_IsGet_IsFreq:
0000fa 940c 0143                 			CALL SendPrescaler
                                 			JMP CleanupEndOfProto
                                 
0000fc 940e 0200                 		CmdCheck_IsGet_IsRGBLED:
0000fe eb2b                      			CALL GetLED
0000ff 940e 014a                 			LDI Arg,Proto_Reply
000101 2f23                      			CALL Send
000102 940e 014a                 			MOV Arg,Ret1
000104 940c 0143                 			CALL Send
                                 			JMP CleanupEndOfProto
                                 
000106 940e 0229                 		CmdCheck_IsGet_Track:
000108 940c 0143                 			CALL SendTrack
                                 			JMP CleanupEndOfProto
                                 
00010a 940c 0112                 ;Dette er en mellem station til EndOfProto
                                 JMP	SkipEndOfProtoInter
00010c 940c 0145                 EndOfProtoInter:
                                 JMP EndOfProto
00010e 940e 01b9                 Error:
                                 	CALL Cleanup
000110 940c 0145                 	;Indsæt hvad der ellers skal ske i Error her 
                                 	JMP EndOfProto
                                 SkipEndOfProtoInter:
                                 
                                 DataCheck:
000112 9130 0000                 	;MOV InData,InBesked Slettes
000114 3a3a                      	LDS Ret1, Intype_DatSpac
000115 f099                      	CPI Ret1, Proto_GET
000116 3535                      	BREQ GetWithData
000117 f7b1                      	CPI Ret1, Proto_SET
000118 9130 0001                 	BRNE Error
00011a 3132                      	LDS Ret1, InCmd_DatSpac
00011b f0a9                      	CPI Ret1, Proto_PWMPre
00011c 3133                      	BREQ SetFrequency
00011d f0e1                      	CPI Ret1, Proto_AccRef
00011e 3134                      	BREQ SetAcceleration
00011f f0f1                      	CPI Ret1, Proto_RGBLED
000120 3130                      	BREQ SetRGBLED
000121 f761                      	CPI Ret1, Proto_Start
000122 940e 0155                 	BRNE Error
000124 e026                      	CALL SetSpeed
000125 940e 01ee                 	LDI Arg, CmdIn_Start_LED	
000127 940c 0143                 	CALL LED1SekSet		;Tænder LED Værdien for at have modtaget et...
                                 	JMP CleanupEndOfProto
                                 
000129 9130 0001                 	GetWithData:
00012b 3133                      		LDS Ret1, InCmd_DatSpac
00012c f709                      		CPI Ret1, Proto_AccRef
00012d 940e 0184                 		BRNE Error
00012f 940c 0143                 		CALL SendAccRef
                                 		JMP CleanupEndOfProto
                                 
000131 3048                      	SetFrequency:
000132 f6dc                      		CPI InBesked,8
000133 940e 0162                 		BRGE Error
000135 e028                      		CALL SetPrescaler
000136 940e 01ee                 		LDI Arg, CmdIn_PWMPrescaler_LED	
000138 940c 0143                 		CALL LED1SekSet		;Tænder LED Værdien for at have modtaget et...
                                 		JMP CleanupEndOfProto
                                 
00013a 940e 0167                 	SetAcceleration:
00013c 940c 0143                 		CALL SetAccRef
                                 		JMP CleanupEndOfProto
                                 
00013e 2f24                      	SetRGBLED:
00013f 940e 01ee                 		MOV  Arg, InBesked
000141 940c 0143                 		CALL LED1SekSet
                                 		JMP CleanupEndOfProto
                                 
                                 
000143 940e 01b9                 CleanupEndOfProto:
                                 	CALL Cleanup
                                 EndOfProto:
000145 940c 00b9                 
                                 JMP UAuto	;Hopper til starten af main
                                 
                                 ;Subroutines---------------------------------------
000147 e000                      StopCar:
000148 bd03                      	LDI Temp1,0			;
000149 9508                      	OUT OCR2,Temp1		;Sætter bilens hastighed til 0%
                                 	RET
                                 
00014a 9b5d                      Send:
00014b cffe                      	SBIS UCSRA,UDRE		;Tjekker om der stadig er noget der er ved at blive sent ved at se om UDRE er "1" (hvilket den bliver når UDR (det register som indeholder der der bliver sendt) er tom)
00014c b92c                      	RJMP Send			;Hvis UDRE er "0", hopper den tilbage til Send:, og dermed venter på at UDR er tom.
00014d 9508                      	OUT UDR,Arg		;Lægger Arg ind i den tomme UDR. Dermed vil Arg blive sendt.
                                 	RET					;Subroutinen er færdig, returnerer til adressen efter subroutinen blev kaldet fra. 
                                 
                                 SendSpeed:
00014e 2f2f                      	;LDI Arg, Proto_REPLY	;
00014f 940e 014a                 	MOV Arg, ZH
                                 	CALL Send			;Sender Replytypen (0xBB)
000151 2f2e                      	;IN Arg,OCR2		;
000152 940e 014a                 	MOV Arg, ZL
000154 9508                      	CALL Send			;Sender den nuværende hastighed 
                                 	RET
                                 
000155 940e 01c3                 SetSpeed:
000157 bd33                      	CALL CalcOCR2		;Kalder en subrutine der udregner OCR2 (Dens resutat ligger i Ret1)
000158 9508                      	OUT OCR2,Ret1		;Sætter hastigheden på bilen til resultatet fra CalcOCR2.
                                 	RET
                                 
000159 eb2b                      SendPrescaler:
00015a 940e 014a                 	LDI Arg, Proto_REPLY
00015c b505                      	CALL Send
00015d 7007                      	IN Temp1,TCCR2
00015e 2f20                      	ANDI Temp1,0b00000111
00015f 940e 014a                 	MOV Arg,Temp1
000161 9508                      	CALL Send
                                 	RET
                                 
000162 b505                      SetPrescaler:
000163 7f08                      	IN Temp1,TCCR2
000164 2b04                      	ANDI Temp1,0b11111000
000165 bd05                      	OR Temp1,InBesked
000166 9508                      	OUT TCCR2,Temp1
                                 	RET
                                 
                                 
000167 fd40                      SetAccRef:
000168 940c 0177                 	SBRC InBesked,0
                                 	JMP SetAccRefN
00016a 9546                      	;AccRefP
00016b e70f                      		LSR InBesked
00016c 0f40                      		LDI Temp1,127
00016d 2f94                      		ADD InBesked,Temp1
00016e 2f29                      		MOV AccRefP, InBesked
00016f e000                      		MOV Arg, AccRefP
000170 e010                      		LDI Temp1, HIGH(EEPROM_AccRefP)
000171 940e 01d1                 		LDI Temp2, LOW(EEPROM_AccRefP)
000173 e024                      		CALL SaveInEEPROM
000174 940e 01ee                 		LDI Arg, CmdIn_AccRefP_LED	
000176 9508                      		CALL LED1SekSet		;Tænder LED Værdien for at have modtaget et AccRefP
                                 	RET
                                 
000177 9546                      	SetAccRefN:
000178 e70f                      		LSR InBesked
000179 1b04                      		LDI Temp1,127
00017a 2fa0                      		SUB Temp1,InBesked
00017b 2f2a                      		MOV AccRefN, Temp1
00017c e000                      		MOV Arg, AccRefN
00017d e011                      		LDI Temp1, HIGH(EEPROM_AccRefN)
00017e 940e 01d1                 		LDI Temp2, LOW(EEPROM_AccRefN)
000180 e025                      		CALL SaveInEEPROM
000181 940e 01ee                 		LDI Arg, CmdIn_AccRefN_LED	
000183 9508                      		CALL LED1SekSet		;Tænder LED Værdien for at have modtaget et AccRefN
                                 	RET
                                 
000184 2f24                      SendAccRef:
000185 940e 014a                 	MOV Arg, InBesked
000187 3041                      	CALL Send
000188 f039                      	CPI InBesked,1
000189 eb2b                      	BREQ SendAccRefN
00018a 940e 014a                 	LDI Arg, Proto_REPLY
00018c 2f29                      	CALL Send
00018d 940e 014a                 	MOV Arg, AccRefP
00018f 9508                      	CALL Send
                                 	RET
                                 
000190 eb2b                      	SendAccRefN:
000191 940e 014a                 	LDI Arg, Proto_REPLY
000193 2f2a                      	CALL Send
000194 940e 014a                 	MOV Arg, AccRefN
000196 9508                      	CALL Send
                                 	RET
                                 
000197 3545                      IsType:
000198 f041                      	CPI InBesked, Proto_SET
000199 3a4a                      	BREQ wasType
00019a f031                      	CPI InBesked, Proto_GET
00019b 3b4b                      	BREQ wasType
00019c f021                      	CPI InBesked, Proto_REPLY
                                 	BREQ wasType
                                 	
                                 	;INDSÆT NYE TELEGRAMTYPER
00019d e020                      
00019e 9320 0000                 	LDI Arg,0
0001a0 9508                      	STS Intype_DatSpac, Arg
                                 	RET
                                 
                                 	wasType:
0001a1 9340 0000                 		;MOV InType,InBesked
0001a3 9508                      		STS Intype_DatSpac, InBesked
                                 		RET
                                 
0001a4 3140                      IsCmd:
0001a5 f081                      	CPI InBesked, Proto_Start		;0x10
0001a6 3141                      	BREQ wasCommand
0001a7 f071                      	CPI InBesked, Proto_Stop		;0x11
0001a8 3142                      	BREQ wasCommand
0001a9 f061                      	CPI InBesked, Proto_PWMPre		;0x12
0001aa 3143                      	BREQ wasCommand
0001ab f051                      	CPI InBesked, Proto_AccRef		;0x13
0001ac 3144                      	BREQ wasCommand
0001ad f041                      	CPI InBesked, Proto_RGBLED		;0x14
0001ae 3145                      	BREQ wasCommand
0001af f031                      	CPI InBesked, Proto_PWMStop		;0x15
0001b0 3146                      	BREQ wasCommand
0001b1 f021                      	CPI InBesked, Proto_Track		;0x16
                                 	BREQ wasCommand
                                 
                                 	;INDSÆT NYE TELEGRAMKOMMANDOER.
0001b2 e020                      
0001b3 9320 0001                 	LDI Arg,0
0001b5 9508                      	STS InCmd_DatSpac, Arg
                                 	RET
                                 
0001b6 9340 0001                 	wasCommand:
0001b8 9508                      		STS InCmd_DatSpac, InBesked
                                 		RET
                                 
                                 Cleanup:
0001b9 e020                      	;Renser Intype
0001ba 9320 0000                 	LDI Arg,0
                                 	STS Intype_DatSpac, Arg
0001bc 9320 0001                 	;Renser InCmd
                                 	STS InCmd_DatSpac, Arg
0001be e040                      	;Renser InBesked
0001bf e000                      	LDI InBesked,0
0001c0 e010                      	LDI Temp1, 0
0001c1 e030                      	LDI Temp2, 0
                                 	LDI Ret1, 0
                                 
                                 	;Hvis der er flere der skal renses så ind her
0001c2 9508                      
                                 	RET
                                 
0001c3 2f04                      CalcOCR2:
0001c4 2f30                      	MOV Temp1,InBesked
0001c5 0f30                      	MOV Ret1,Temp1
0001c6 9506                      	ADD Ret1,Temp1
0001c7 0f30                      	LSR Temp1
0001c8 9506                      	ADD Ret1,Temp1
0001c9 9506                      	LSR Temp1
0001ca 9506                      	LSR Temp1
0001cb 0f30                      	LSR Temp1
0001cc 9506                      	ADD Ret1,Temp1
0001cd 1b30                      	LSR Temp1
0001ce 9506                      	SUB Ret1,Temp1
0001cf 0f30                      	LSR Temp1
0001d0 9508                      	ADD Ret1,Temp1
                                 	RET
                                 
                                 
0001d1 99e1                      SaveInEEPROM:
0001d2 cffe                      	SBIC EECR, EEWE			;Tjekker om EEPROM er klar til at bruges 
0001d3 bb0f                      	RJMP SaveInEEPROM
0001d4 bb1e                      	OUT EEARH, Temp1		;Sætter lokationen i EEPROM 
0001d5 bb2d                      	OUT EEARL, Temp2		;Sætter lokationen i EEPROM
0001d6 94f8                      	OUT EEDR, Arg	;Giver EEPROM den som skal gemmes
0001d7 9ae2                      	CLI						;Stoper for intarups da de næste to ikke må forstyres 
0001d8 9ae1                      	SBI EECR, EEMWE			;Sætter Master Write til
0001d9 9478                      	SBI EECR, EEWE			;Sætter write igang 
0001da 9508                      	SEI						;Starter intarups igen 
                                 RET
                                 
                                 
0001db 99e1                      LoadFromEEPROM:
0001dc cffe                      	SBIC EECR, EEWE			;Tjekker om EEPROM er klar til at bruges 
0001dd bb0f                      	RJMP LoadFromEEPROM
0001de bb1e                      	OUT EEARH, Temp1		;Sætter lokationen i EEPROM 
0001df 9ae0                      	OUT EEARL, Temp2		;Sætter lokationen i EEPROM
0001e0 b33d                      	SBI EECR, EERE			;Sætter Read til 
0001e1 9508                      	IN Ret1, EEDR		;Henter hvad der er i EEPROM ned i Ret1
                                 RET
                                 
0001e2 fd63                      SetLED:
0001e3 c009                      	SBRC SREG2, LEDTimeOn
0001e4 3420                      	RJMP EndOfSetLED
0001e5 f438                      	CPI Arg,64
0001e6 940e 01fc                 	BRSH ERROREndOfSetLED	;Så hvis værdigen i LEDVerdi ikke svare til en værdig til LED'eren er der en fejl
0001e8 0f22                      	CALL ClearLED
0001e9 b31b                      	LSL Arg				;Rykker LED infoen en til venstre for at der kommer til at passe med hvor de er sat på 
0001ea 7811                      	IN Temp2, PORTA			;Loader PORTA ind for at undgå kompliktation med ADC
0001eb 2b12                      	ANDI Temp2, 0b10000001	;Udmasker alt andet end bit 0 og 7 for ikke at ændre værdiger for ADC og ubrugt pin 7 
0001ec bb1b                      	OR Temp2, Arg			;or'er den værdi som skal være på LED'eren sammen med det der allerede var på PORTA
                                 	OUT	PORTA, Temp2		;Sender den nye værdig ud på PORTA
                                 	ERROREndOfSetLED:
0001ed 9508                      	EndOfSetLED:
                                 RET
                                 
0001ee 6063                      LED1SekSet:
                                 	SBR SREG2, LEDTimeOn ;Sikre at LED'er ikke kan ændres på nær ved at kalde LED1Sek igen inden 1 sek
0001ef 3420                      	;Tjekker om LEDVerdi er gyldig
0001f0 f450                      	CPI Arg,64
                                 	BRSH ErrorLED1SekSet	;Så hvis værdigen i LEDVerdi ikke svare til en værdig til LED'eren er der en fejl 
0001f1 0f22                      	;Tænder LED'er med værdi
0001f2 b31b                      	LSL Arg				;Rykker LED infoen en til venstre for at der kommer til at passe med hvor de er sat på 
0001f3 7811                      	IN Temp2, PORTA			;Loader PORTA ind for at undgå kompliktation med ADC
0001f4 2b12                      	ANDI Temp2, 0b10000001	;Udmasker alt andet end bit 0 og 7 for ikke at ændre værdiger for ADC og ubrugt pin 7 
0001f5 bb1b                      	OR Temp2, Arg			;or'er den værdi som skal være på LED'eren sammen med det der allerede var på PORTA
                                 	OUT	PORTA, Temp2		;Sender den nye værdig ud på PORTA
0001f6 e000                      	;Timer1 start (Den er på 1 sek)
0001f7 bd0d                      	LDI Temp1,0
0001f8 bd0c                      	OUT TCNT1H, Temp1
0001f9 e00d                      	OUT TCNT1L, Temp1
0001fa bd0e                      	LDI Temp1, (1<<WGM12)|(1<<CS12)|(1<<CS10)	;CTC, pre 1024 og tænder for timer1 som er sat til 1 sek
                                 	OUT TCCR1B, Temp1 
0001fb 9508                      ErrorLED1SekSet:
                                 RET
                                 
0001fc b31b                      ClearLED:
0001fd 7811                      	IN Temp2, PORTA			;Loader PORTA ind for at undgå kompliktation med ADC
0001fe bb1b                      	ANDI Temp2, 0b10000001	;Udmasker alt andet end bit 0 og 7 for ikke at ændre værdiger for ADC og ubrugt pin 7 
0001ff 9508                      	OUT	PORTA, Temp2		;Sender den nye værdig ud på PORTA som slukker alle LED'er
                                 RET
                                 	
000200 b33b                      GetLED:
000201 773e                      	IN Ret1, PORTA			;Loader PORTA ind 
000202 9536                      	ANDI Ret1, 0b01111110	;Udmasker bit 0 og 7 
000203 9508                      	LSR Ret1				;Rykker Ret1 en til højre så det passer med at LED verdi er mellem 0 og 63 
                                 RET
                                 
000204 940e 0221                 ChangeState:
000206 2f06                      	CALL StoreTrack
000207 7300                      	MOV Temp1, SREG2
000208 0f00                      	ANDI Temp1, 0b00110000
000209 0f00                      	LSL Temp1
00020a 736f                      	LSL Temp1
00020b 2b60                      	ANDI SREG2, 0b00111111
                                 	OR SREG2, Temp1
00020c 940e 020f                 	;Midertidigt
                                 	CALL StateLED
00020e 9508                      	;
                                 RET
                                 
00020f 2f06                      StateLED:
000210 7c00                      	MOV Temp1, SREG2
000211 3400                      	ANDI Temp1, 0b11000000
000212 f031                      	CPI Temp1, (Turn1<<State0)
000213 3800                      	BREQ Sving1StateLED
000214 f041                      	CPI Temp1, (Turn2<<State0)
                                 	BREQ Sving2StateLED
000215 e32f                      	StraightStateLED:
000216 940e 01e2                 	LDI Arg, LED_Straight
000218 9508                      	CALL SetLED
                                 	RET
000219 e023                      	Sving1StateLED:
00021a 940e 01e2                 	LDI Arg, LED_Sving1
00021c 9508                      	CALL SetLED
                                 	RET
00021d e128                      	Sving2StateLED:
00021e 940e 01e2                 	LDI Arg, LED_Sving2
000220 9508                      	CALL SetLED
                                 	RET
                                 
000221 2f06                      StoreTrack:
000222 7c00                      	MOV Temp1, SREG2
000223 2b70                      	ANDI Temp1,0b11000000
000224 9371                      	OR DistH, Temp1
000225 9381                      	ST Z+, DistH
000226 e070                      	ST Z+, DistL
000227 e080                      	LDI DistH,0
000228 9508                      	LDI DistL,0
                                 RET
                                 
000229 940e 0147                 SendTrack:
00022b eb2b                      	CALL StopCar
00022c 940e 014a                 	LDI Arg, Proto_REPLY
00022e 94f8                      	CALL Send
00022f 2f0f                      	CLI
000230 2f1e                      	MOV Temp1, ZH
000231 e0f0                      	MOV Temp2, ZL
000232 e0e4                      	LDI ZH, HIGH(ZStart)
                                 	LDI ZL, LOW(ZStart)
000233 17f0                      	ZTjek:
000234 f428                      		CP ZH, Temp1
                                 		BRSH ZTjek2
000235 9121                      	ZTjek2B:
000236 940e 014a                 		LD Arg, Z+
000238 940c 0233                 		CALL Send
                                 		JMP ZTjek
00023a 17e1                      	ZTjek2:
00023b f3c8                      		CP ZL, Temp2
00023c 9478                      		BRLO ZTjek2B
00023d 9508                      		SEI
                                 RET
                                 ;Intarups -----------------------------------------------------------------
                                 
                                 ADCDone:				
00023e b154                      	;Når en ADC er færdig hopper den hertil
00023f b155                      	IN	AccData, ADCL		;Indlæser den lave del af ADC
000240 9a36                      	IN  AccData, ADCH		;Indlæser den høje del af ADC
000241 9468                      	SBI ADCSRA, ADSC	;Starter conversion igen 
000242 9518                      	SET
                                 RETI
                                 
000243 930f                      Timer1CompereA:
                                 	PUSH Temp1
000244 940e 01fc                 	;Slukker LED'er
                                 	CALL ClearLED
000246 e000                      	;Stopper timer
000247 bd0e                      	LDI Temp1, 0			;Timer fra
000248 7f6c                      	OUT TCCR1B, Temp1		
000249 910f                      	CBR SREG2, LEDTimeOn
00024a 9518                      	POP Temp1
                                 RETI
                                 
00024b 930f                      InteDist:
00024c e001                      	PUSH Temp1
00024d 0f80                      	LDI Temp1, 1
00024e e000                      	ADD DistL, Temp1
00024f 1f70                      	LDI Temp1, 0
000250 910f                      	ADC DistH, Temp1
000251 9518                      	POP Temp1
                                 RETI
                                 
                                 ;----------------------\/\/\/Junk jart\/\/\/ ----------------------
                                 
                                 /*
                                 ;Tænder LED for modtaget Cmd 1 sek
                                 		LDI Temp1, CmdIn_LED
                                 		CALL LED1SekSet
                                 ;
                                 */
                                 
                                 /*
                                 LDI Temp1, CmdIn_LED	


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega32A" register use summary:
x  :   0 y  :   0 z  :   3 r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16: 118 r17:  20 r18:  42 r19:  48 r20:  26 
r21:   3 r22:  18 r23:   4 r24:   3 r25:   5 r26:   5 r27:   3 r28:   2 
r29:   4 r30:   5 r31:   5 
Registers used: 17 out of 35 (48.6%)

"ATmega32A" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   2 add   :   7 adiw  :   0 and   :   0 
andi  :  16 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   1 
brcc  :   0 brcs  :   0 break :   0 breq  :  31 brge  :   1 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   3 brlt  :   0 brmi  :   0 
brne  :   7 brpl  :   0 brsh  :   5 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :  53 cbi   :   0 cbr   :   1 
clc   :   0 clh   :   0 cli   :   2 cln   :   0 clr   :   0 cls   :   0 
clt   :   1 clv   :   0 clz   :   0 com   :   0 cp    :   2 cpc   :   0 
cpi   :  45 cpse  :   0 dec   :   0 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :  10 inc   :   1 jmp   :  29 
ld    :   1 ldd   :   0 ldi   :  68 lds   :   8 lpm   :   0 lsl   :   4 
lsr   :   9 mov   :  31 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :   0 or    :   5 ori   :   3 out   :  32 pop   :   2 
push  :   2 rcall :   0 ret   :  29 reti  :   3 rjmp  :   6 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :  13 sbic  :   3 sbis  :   2 
sbiw  :   0 sbr   :   1 sbrc  :   2 sbrs  :   0 sec   :   0 seh   :   0 
sei   :   3 sen   :   0 ser   :   0 ses   :   0 set   :   1 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   2 std   :   0 sts   :   6 
sub   :   2 subi  :   0 swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 42 out of 113 (37.2%)

"ATmega32A" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0004a4   1102      0   1102   32768   3.4%
[.dseg] 0x000060 0x000060      0      0      0    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 4 warnings
