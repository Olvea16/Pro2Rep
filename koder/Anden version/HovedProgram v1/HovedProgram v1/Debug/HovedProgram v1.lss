
AVRASM ver. 2.2.6  C:\Users\simon\OneDrive - student.sdu.dk\Studie\2 semester\Pro2\koder\Flowcharts\Anden verdion\HovedProgram v1\HovedProgram v1\main.asm Sun May 21 12:26:36 2017

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.1.130\avrasm\inc\m32adef.inc'
C:\Users\simon\OneDrive - student.sdu.dk\Studie\2 semester\Pro2\koder\Flowcharts\Anden verdion\HovedProgram v1\HovedProgram v1\main.asm(14): warning: Register r26 already defined by the .DEF directive
C:\Users\simon\OneDrive - student.sdu.dk\Studie\2 semester\Pro2\koder\Flowcharts\Anden verdion\HovedProgram v1\HovedProgram v1\main.asm(15): warning: Register r27 already defined by the .DEF directive
C:\Users\simon\OneDrive - student.sdu.dk\Studie\2 semester\Pro2\koder\Flowcharts\Anden verdion\HovedProgram v1\HovedProgram v1\main.asm(16): warning: Register r28 already defined by the .DEF directive
C:\Users\simon\OneDrive - student.sdu.dk\Studie\2 semester\Pro2\koder\Flowcharts\Anden verdion\HovedProgram v1\HovedProgram v1\main.asm(17): warning: Register r29 already defined by the .DEF directive
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.1.130\avrasm\inc\m32adef.inc'
                                 
                                 ; Sidetal anviser sidenummer i ATmega32A datasheet uploadet på blackboard.
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega32A.xml ***********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m32Adef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega32A
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega32A
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M32ADEF_INC_
                                 #define _M32ADEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega32A
                                 #pragma AVRPART ADMIN PART_NAME ATmega32A
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x02
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	OCR0	= 0x3c
                                 .equ	GICR	= 0x3b
                                 .equ	GIFR	= 0x3a
                                 .equ	TIMSK	= 0x39
                                 .equ	TIFR	= 0x38
                                 .equ	SPMCR	= 0x37
                                 .equ	TWCR	= 0x36
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUCSR	= 0x34
                                 .equ	TCCR0	= 0x33
                                 .equ	TCNT0	= 0x32
                                 .equ	OSCCAL	= 0x31
                                 .equ	OCDR	= 0x31
                                 .equ	SFIOR	= 0x30
                                 .equ	TCCR1A	= 0x2f
                                 .equ	TCCR1B	= 0x2e
                                 .equ	TCNT1L	= 0x2c
                                 .equ	TCNT1H	= 0x2d
                                 .equ	OCR1AL	= 0x2a
                                 .equ	OCR1AH	= 0x2b
                                 .equ	OCR1BL	= 0x28
                                 .equ	OCR1BH	= 0x29
                                 .equ	ICR1L	= 0x26
                                 .equ	ICR1H	= 0x27
                                 .equ	TCCR2	= 0x25
                                 .equ	TCNT2	= 0x24
                                 .equ	OCR2	= 0x23
                                 .equ	ASSR	= 0x22
                                 .equ	WDTCR	= 0x21
                                 .equ	UBRRH	= 0x20
                                 .equ	UCSRC	= 0x20
                                 .equ	EEARL	= 0x1e
                                 .equ	EEARH	= 0x1f
                                 .equ	EEDR	= 0x1d
                                 .equ	EECR	= 0x1c
                                 .equ	PORTA	= 0x1b
                                 .equ	DDRA	= 0x1a
                                 .equ	PINA	= 0x19
                                 .equ	PORTB	= 0x18
                                 .equ	DDRB	= 0x17
                                 .equ	PINB	= 0x16
                                 .equ	PORTC	= 0x15
                                 .equ	DDRC	= 0x14
                                 .equ	PINC	= 0x13
                                 .equ	PORTD	= 0x12
                                 .equ	DDRD	= 0x11
                                 .equ	PIND	= 0x10
                                 .equ	SPDR	= 0x0f
                                 .equ	SPSR	= 0x0e
                                 .equ	SPCR	= 0x0d
                                 .equ	UDR	= 0x0c
                                 .equ	UCSRA	= 0x0b
                                 .equ	UCSRB	= 0x0a
                                 .equ	UBRRL	= 0x09
                                 .equ	ACSR	= 0x08
                                 .equ	ADMUX	= 0x07
                                 .equ	ADCSRA	= 0x06
                                 .equ	ADCH	= 0x05
                                 .equ	ADCL	= 0x04
                                 .equ	TWDR	= 0x03
                                 .equ	TWAR	= 0x02
                                 .equ	TWSR	= 0x01
                                 .equ	TWBR	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEWE	= 1	; EEPROM Write Enable
                                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDTOE	= 4	; RW
                                 .equ	WDDE	= WDTOE	; For compatibility
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; GICR - General Interrupt Control Register
                                 .equ	GIMSK	= GICR	; For compatibility
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	INT2	= 5	; External Interrupt Request 2 Enable
                                 .equ	INT0	= 6	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 7	; External Interrupt Request 1 Enable
                                 
                                 ; GIFR - General Interrupt Flag Register
                                 .equ	INTF2	= 5	; External Interrupt Flag 2
                                 .equ	INTF0	= 6	; External Interrupt Flag 0
                                 .equ	INTF1	= 7	; External Interrupt Flag 1
                                 
                                 ; MCUCR - General Interrupt Control Register
                                 .equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	ISC2	= 6	; Interrupt Sense Control 2
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TCCR0 - Timer/Counter Control Register
                                 .equ	CS00	= 0	; Clock Select 1
                                 .equ	CS01	= 1	; Clock Select 1
                                 .equ	CS02	= 2	; Clock Select 2
                                 .equ	WGM01	= 3	; Waveform Generation Mode 1
                                 .equ	CTC0	= WGM01	; For compatibility
                                 .equ	COM00	= 4	; Compare match Output Mode 0
                                 .equ	COM01	= 5	; Compare Match Output Mode 1
                                 .equ	WGM00	= 6	; Waveform Generation Mode
                                 .equ	PWM0	= WGM00	; For compatibility
                                 .equ	FOC0	= 7	; Force Output Compare
                                 
                                 ; TCNT0 - Timer/Counter Register
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0 - Output Compare Register
                                 .equ	OCR0_0	= 0	; 
                                 .equ	OCR0_1	= 1	; 
                                 .equ	OCR0_2	= 2	; 
                                 .equ	OCR0_3	= 3	; 
                                 .equ	OCR0_4	= 4	; 
                                 .equ	OCR0_5	= 5	; 
                                 .equ	OCR0_6	= 6	; 
                                 .equ	OCR0_7	= 7	; 
                                 
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0	= 1	; Timer/Counter0 Output Compare Match Interrupt register
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0	= 1	; Output Compare Flag 0
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 6	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	OCIE2	= 7	; Timer/Counter2 Output Compare Match Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2	= 7	; Output Compare Flag 2
                                 
                                 ; TCCR2 - Timer/Counter2 Control Register
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM21	= 3	; Clear Timer/Counter2 on Compare Match
                                 .equ	CTC2	= WGM21	; For compatibility
                                 .equ	COM20	= 4	; Compare Output Mode bit 0
                                 .equ	COM21	= 5	; Compare Output Mode bit 1
                                 .equ	WGM20	= 6	; Pulse Width Modulator Enable
                                 .equ	PWM2	= WGM20	; For compatibility
                                 .equ	FOC2	= 7	; Force Output Compare
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2 - Timer/Counter2 Output Compare Register
                                 .equ	OCR2_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2UB	= 0	; Timer/counter Control Register2 Update Busy
                                 .equ	OCR2UB	= 1	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 2	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 3	; Asynchronous Timer/counter2
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1B	= 3	; Output Compare Flag 1B
                                 .equ	OCF1A	= 4	; Output Compare Flag 1A
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	PWM10	= WGM10	; For compatibility
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	PWM11	= WGM11	; For compatibility
                                 .equ	FOC1B	= 2	; Force Output Compare 1B
                                 .equ	FOC1A	= 3	; Force Output Compare 1A
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	CTC10	= WGM12	; For compatibility
                                 .equ	CTC1	= WGM12	; For compatibility
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	CTC11	= WGM13	; For compatibility
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** USART ************************
                                 ; UDR - USART I/O Data Register
                                 .equ	UDR0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSRA - USART Control and Status Register A
                                 .equ	USR	= UCSRA	; For compatibility
                                 .equ	MPCM	= 0	; Multi-processor Communication Mode
                                 .equ	U2X	= 1	; Double the USART transmission speed
                                 .equ	UPE	= 2	; Parity Error
                                 .equ	PE	= UPE	; For compatibility
                                 .equ	DOR	= 3	; Data overRun
                                 .equ	FE	= 4	; Framing Error
                                 .equ	UDRE	= 5	; USART Data Register Empty
                                 .equ	TXC	= 6	; USART Transmitt Complete
                                 .equ	RXC	= 7	; USART Receive Complete
                                 
                                 ; UCSRB - USART Control and Status Register B
                                 .equ	UCR	= UCSRB	; For compatibility
                                 .equ	TXB8	= 0	; Transmit Data Bit 8
                                 .equ	RXB8	= 1	; Receive Data Bit 8
                                 .equ	UCSZ2	= 2	; Character Size
                                 .equ	CHR9	= UCSZ2	; For compatibility
                                 .equ	TXEN	= 3	; Transmitter Enable
                                 .equ	RXEN	= 4	; Receiver Enable
                                 .equ	UDRIE	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSRC - USART Control and Status Register C
                                 .equ	UCPOL	= 0	; Clock Polarity
                                 .equ	UCSZ0	= 1	; Character Size
                                 .equ	UCSZ1	= 2	; Character Size
                                 .equ	USBS	= 3	; Stop Bit Select
                                 .equ	UPM0	= 4	; Parity Mode Bit 0
                                 .equ	UPM1	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL	= 6	; USART Mode Select
                                 .equ	URSEL	= 7	; Register Select
                                 
                                 .equ	UBRRHI	= UBRRH	; For compatibility
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; SFIOR - Special Function IO Register
                                 .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register
                                 .equ	ADCSR	= ADCSRA	; For compatibility
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; When this bit is written to one,the Timer/Counter2 prescaler will be reset.The bit will be cleared by hardware after the operation is performed.Writing a zero to this bit will have no effect.This bit will always be read as zero if Timer/C                                 ounter2 is clocked by the internal CPU clock.If this bit is written when Timer/Counter2 is operating in asynchronous mode,the bit will remain one until the prescaler has been reset.
                                 .equ	ADFR	= ADATE	; For compatibility
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	ADTS0	= 5	; ADC Auto Trigger Source 0
                                 .equ	ADTS1	= 6	; ADC Auto Trigger Source 1
                                 .equ	ADTS2	= 7	; ADC Auto Trigger Source 2
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 ;.equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 ;.equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 ;.equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 ;.equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 .equ	SM0	= 4	; Sleep Mode Select
                                 .equ	SM1	= 5	; Sleep Mode Select
                                 .equ	SM2	= 6	; Sleep Mode Select
                                 .equ	SE	= 7	; Sleep Enable
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	MCUSR	= MCUCSR	; For compatibility
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	PSR10	= 0	; Prescaler Reset Timer/Counter1&0
                                 .equ	PSR2	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PUD	= 2	; Pull-up Disable
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCR - Store Program Memory Control Register
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write secion read enable
                                 .equ	ASRE	= RWWSRE	; For compatibility
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	ASB	= RWWSB	; For compatibility
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler bits
                                 .equ	TWPS1	= 1	; TWI Prescaler bits
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	BODEN	= 6	; Brown out detector enable
                                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x003f
                                 .equ	SRAM_START	= 0x0060
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x085f
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                                 .equ	OC2addr	= 0x0008	; Timer/Counter2 Compare Match
                                 .equ	OVF2addr	= 0x000a	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x000c	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x000e	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0010	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x0012	; Timer/Counter1 Overflow
                                 .equ	OC0addr	= 0x0014	; Timer/Counter0 Compare Match
                                 .equ	OVF0addr	= 0x0016	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0018	; Serial Transfer Complete
                                 .equ	URXCaddr	= 0x001a	; USART, Rx Complete
                                 .equ	UDREaddr	= 0x001c	; USART Data Register Empty
                                 .equ	UTXCaddr	= 0x001e	; USART, Tx Complete
                                 .equ	ADCCaddr	= 0x0020	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x0022	; EEPROM Ready
                                 .equ	ACIaddr	= 0x0024	; Analog Comparator
                                 .equ	TWIaddr	= 0x0026	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0028	; Store Program Memory Ready
                                 
                                 .equ	INT_VECTORS_SIZE	= 42	; size in words
                                 
                                 #endif  /* _M32ADEF_INC_ */
                                 
                                 
                                 
                                 ;Register
                                 .DEF Temp1 = R16	;Midlertidigt register
                                 .DEF Temp2 = R17	;Midlertidigt register.
                                 .DEF Arg = R18 ;Argumentregister
                                 .DEF Ret1 = R19 ;Returregister.
                                 .DEF InBesked = R20 ;Register til besked 
                                 .DEF AccData = R21
                                 .DEF SREG2 = R22
                                 .DEF DistH = R23
                                 .DEF DistL = R24
                                 .DEF AccRefP = R25
                                 .DEF AccRefN = R26
                                 .DEF AccSumH = R27
                                 .DEF AccSumL = R28
                                 .DEF DivCounter = R29
                                 ;Vi må ikke tage R30 og R31 hvis vi gerne vil have Z (X og Y er R26 til R29) Vi skal nok samle nogel af registeren og tjekker om vi ik kan bruge Temp og Ret. Evt lave Arg om til et register vi bruger til at give verdi til subrutiner med så EEPROMSave og L                                 EDVerdi kan komme der ind
                                 ;--------------------------
                                 
                                 ;EEPROM
                                 .EQU EEPROM_AccRefP = 0x000
                                 .EQU EEPROM_AccRefN = 0x001
                                 ;Fra 0x000 til 0x3FF er gyldige  der med 1024 adresser 
                                 ;---------------------------
                                 
                                 ;Data Space
                                 ;Placeringen 
                                 .EQU DataSpace_InType = 0
                                 .EQU DataSpace_InCmd = 1
                                 .EQU DataSpace_ZMaxH = 2
                                 .EQU DataSpace_ZMaxL = 3
                                 .EQU DataSpace_StoredDistH = 4
                                 .EQU DataSpace_StoredDistL = 5
                                 .EQU DataSpace_Temp1 = 6
                                 .EQU DataSpace_Temp2 = 7
                                 .EQU DataSpace_Velocity_Straight = 8
                                 .EQU DataSpace_Velocity_Turn = 9
                                 .EQU DataSpace_Offset = 10
                                 .EQU ZStart = 512			;Random data i starten af dataspace
                                 
                                 ;SREG2 Navngivning
                                 .EQU StateCount0 = 0 
                                 .EQU StateCount1 = 1
                                 .EQU StateCount2 = 2
                                 .EQU LEDTimeON = 3
                                 .EQU LastState0 = 4 
                                 .EQU LastState1 = 5 
                                 .EQU State0 = 6
                                 .EQU State1 = 7
                                 ;---------------------------
                                 
                                 ;
                                 ;Hysteresen
                                 .EQU Hyst = 10
                                 
                                 ;States
                                 .EQU Straight = 0
                                 .EQU Turn1 = 1
                                 .EQU Turn2 = 2
                                 
                                 ;Hastigheder 
                                 .EQU Velocity_Turn = 89 ;Ca. 35.
                                 .EQU Velocity_Straight = 204 ;Ca. 80.
                                 .EQU Velocity_PreLine = 76 ;Ca. 30
                                 
                                 
                                 /*;De her skal SLETTES!!!!
                                 .EQU AccRefN_Konst = 100
                                 .EQU AccRefP_Konst = 160
                                 */
                                 
                                 
                                 ;Protokol 
                                 .EQU Proto_SET = 0x55
                                 .EQU Proto_GET = 0xAA
                                 .EQU Proto_REPLY = 0xBB
                                 
                                 .EQU Proto_Start = 0x10
                                 .EQU Proto_Stop = 0x11
                                 .EQU Proto_PWMPre = 0x12
                                 .EQU Proto_AccRef = 0x13
                                 .EQU Proto_RGBLED = 0x14
                                 .EQU Proto_PWMStop = 0x15
                                 .EQU Proto_Track = 0x16
                                 ;---------------------------
                                 
                                 ;LED
                                 .EQU LED_PreLine = 0b010010
                                 .EQU LED_Straight = 0b111111
                                 .EQU LED_Turn1 = 0b000011
                                 .EQU LED_Turn2 = 0b011000
                                 
                                 .EQU LED_InCmd_RGBLEDTest = 3
                                 .EQU LED_InCmd_AccRefP = 4
                                 .EQU LED_InCmd_AccRefN = 5
                                 .EQU LED_InCmd_Start = 6
                                 .EQU LED_InCmd_Stop = 7
                                 .EQU LED_InCmd_PWMPrescaler = 8
                                 ;---------------------------
                                 
                                 
                                 
                                 ;---------/\/\/\Navngivning/\/\/\---------------------------\/\/\/Kode\/\/\/---------------------------------------------------------------------------------------------------------------------------------------------------------
                                 
000000 c031                      .ORG 0			;Vektoradresse for Reset.
                                 RJMP Setup      ;Springer til setup. 
                                 
000002 940c 02c9                 .ORG INT0addr
                                 JMP StregInterrupt   
                                 
000004 940c 02c2                 .ORG INT1addr
                                 JMP InteDist
                                 
000020 940c 02b4                 .ORG ADCCaddr	;Dette er den for en ADC er færdig 
                                 JMP ADCDone
                                 
00000e 940c 02b9                 .ORG OC1Aaddr	;Timer 1 compereA servisrutine
                                 JMP Timer1CompereA	
                                 
                                 .ORG 50			;Sætter adressen for denne linje til over 30, da dette ville være lige efter 28+2.
                                 
                                 Setup:
000032 e060                      
                                 LDI SREG2,0
                                 
000033 e008                      ;Opsætning af stack
000034 bf0e                      	LDI Temp1, HIGH(RAMEND)			;Loader højeste hukommelsesadresse (D8 til D15)(The last on-chip RAM address)
000035 e50f                      	OUT SPH,Temp1					;Gemmer i stack pointer 
000036 bf0d                      	LDI Temp1, LOW(RAMEND)			;Loader højeste hukommelsesadresse (D0 til D7)(The last on-chip RAM address)
                                 	OUT SPL,Temp1					;Gemmer i stack pointer 
                                 
000037 ec00                      ;Opsætning af hardware inteerupt 
000038 bf0b                      	LDI Temp1, (1<<INT0)|(1<<INT1)		;Tænder for INT0 og INT1
000039 e00a                      	OUT GICR, Temp1
00003a bf05                      	LDI Temp1, (1<<ISC01)|(1<<ISC11)	;Sætter INT0 og INT1 til at trigge på faldende signal 
00003b 9a92                      	OUT MCUCR, Temp1
00003c 9a93                      	SBI PORTD, 2 ;pull-up activated INT0
                                 	SBI PORTD, 3 ;pull-up activated INT1
                                 
00003d e000                      ;Indhætning af verdier fra EEPROM
00003e e010                      LDI Temp1, HIGH(EEPROM_AccRefP)
00003f 940e 0249                 LDI Temp2, LOW(EEPROM_AccRefP)
000041 2f93                      CALL LoadFromEEPROM
000042 e000                      MOV AccRefP, Ret1
000043 e011                      LDI Temp1, HIGH(EEPROM_AccRefN)
000044 940e 0249                 LDI Temp2, LOW(EEPROM_AccRefN)
000046 2fa3                      CALL LoadFromEEPROM
                                 MOV AccRefN, Ret1
                                 ;---
                                 
000047 e509                      ;Gemning af værdiger i data space
000048 9300 0009                 LDI Temp1, Velocity_Turn
00004a ec0c                      STS DataSpace_Velocity_Turn, Temp1
00004b 9300 0008                 LDI Temp1, Velocity_Straight
                                 STS DataSpace_Velocity_Straight, Temp1
                                 ;-----
                                 
00004d e108                      ;Opsætning af kommunikation
00004e b90a                      	LDI Temp1, (1<<TXEN)|(1<<RXEN)				;Opsætter værdien til modtagelse og afsendelse af seriel data.
00004f e806                      	OUT UCSRB, Temp1							;Sender værdien til opsætningsregisteret, UCSRB (s. 212).
000050 bd00                      	LDI Temp1, (1<<UCSZ1)|(1<<UCSZ0)|(1<<URSEL)	;Her indstilles mikrokontrolleren til 8 bit data, ingen parity bit og kun 1 stop bit.
000051 e607                      	OUT UCSRC, Temp1							;Værdien sendes til registeret UCSRC (s. 214).
000052 b909                      	LDI Temp1, 103								;Her indstilles baud rate til 9600 (ved 16 MHz).
                                 	OUT UBRRL, Temp1							;Værdien for baud rate sendes til registeret UBRRL (s. 216).
                                 
000053 9a8f                      ;Opsætning af PWM
000054 e601                      	SBI DDRD,7		;PordtD Bit7 sættes og bliver output.
000055 bd05                      	LDI Temp1, (1<<WGM00)|(1<<COM01)|(1<<CS00)	
000056 e000                      	OUT TCCR2,Temp1	;Opsætter PWM, sætter prescaleren til 1, fasekorrekt, ikke-inverteret (s. 153).
000057 bd03                      	LDI Temp1,0		;
                                 	OUT OCR2,Temp1	;Sætter PWM til 0, via. registeret OCR2 (OCR2 = PWM * 2.55)
                                 
000058 e000                      ;Opsætning af ADC
000059 bb0a                      	LDI Temp1,0
00005a e80f                      	OUT DDRA, Temp1	;Sætter PortA 0 til indput
00005b b906                      	LDI Temp1,(1<<ADEN)|(1<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)	;Tænder ADC, interrupt på og ck/128 for max præcision 
00005c e600                      	OUT ADCSRA, Temp1
00005d b907                      	LDI Temp1,(1<<REFS0)|(1<<ADLAR)	;AVCC pin som Vref og det er højre justified 0x40(0b?01000000?) 0xC0for2.45 vref
                                 	OUT ADMUX, Temp1
                                 
00005e 9ad1                      ;Opsætning af RGB LED
00005f 9ad2                      	SBI DDRA, 1
000060 9ad3                      	SBI DDRA, 2
000061 9ad4                      	SBI DDRA, 3
000062 9ad5                      	SBI DDRA, 4
000063 9ad6                      	SBI DDRA, 5
                                 	SBI DDRA, 6
                                 
000064 e000                      ;Opsætning af noget af timere1
000065 bd0f                      	LDI Temp1, 0
000066 e100                      	OUT TCCR1A, Temp1 
000067 bf09                      	LDI Temp1,(1<<OCIE1A)	;Timer 1 comber med OCR1A 
000068 e30d                      	OUT TIMSK,Temp1
000069 bd0b                      	LDI Temp1, HIGH(15625-1)	;Hvor meget der skal til får at få 1 sek 
00006a e008                      	OUT	OCR1AH,Temp1
00006b bd0a                      	LDI Temp1, LOW(15625-1)		;Hvor meget der skal til får at få 1 sek 
                                 	OUT	OCR1AL,Temp1
00006c 9478                      
00006d 9a36                      SEI	;Enabler interrupts. 
                                 SBI ADCSRA, ADSC		;Starter conversion (ADC)
                                 ;---------------------------------------
00006e e40c                      PreLine:
00006f bd03                      LDI Temp1, Velocity_PreLine	;Sætter opmålings hastigheden
                                 OUT OCR2, Temp1
000070 e122                      
000071 940e 0250                 LDI Arg, LED_PreLine	;Tænder LED'er
                                 CALL SetLED
                                 
000073 0000                      LoopPreLine:			;Venter på at StregInterrupt sender den vidre 
000074 940c 0073                 NOP
                                 JMP LoopPreLine
                                 
                                 AutoInit:
                                 
                                 /*;De her skal SLETTES!!!!
                                 LDI AccRefN, 150
                                 LDI AccRefP, 100
                                 ;--------------------*/
000076 e0f2                      ;Sætter Z til hvor det første bane stykke skal være 
000077 e0e0                      LDI ZH, HIGH(ZStart)	
                                 LDI ZL, LOW(ZStart)
                                 
000078 e32f                      ;Sætter LED'er til køre lige lys
000079 940e 0250                 LDI Arg,LED_Straight
                                 CALL SetLED
                                 
                                 Auto:
00007b 995f                      ;Tjekker om der skulle være kommet en ny besked 
00007c c0a0                      SBIC UCSRA,RXC	
                                 RJMP UAuto
00007d f016                      
                                 BRBS 6, StateMachine
00007e 940c 00be                 
                                 JMP AutoEnd
                                 
000080 940e 02a6                 	StateMachine:
000082 30d0                      	CALL AvgAcc
000083 f5d1                      	CPI DivCounter, 0
                                 	BRNE AutoEnd
000084 1739                      
000085 f4d0                      	CP Ret1, AccRefP
                                 	BRSH StateMachine_Turn1
000086 173a                      
000087 f138                      	CP Ret1, AccRefN
                                 	BRLO StateMachine_Turn2
000088 2f09                      
000089 e01a                      	MOV Temp1, AccRefP
00008a 1b01                      	LDI Temp2, Hyst
00008b 1730                      	SUB Temp1, Temp2
00008c f588                      	CP Ret1, Temp1
                                 	BRSH AutoEnd
00008d 2f09                      
00008e 0f01                      	MOV Temp1, AccRefP
00008f 1730                      	ADD Temp1, Temp2
000090 f168                      	CP Ret1, Temp1
                                 	BRLO AutoEnd
                                 
000091 2f06                      		StateMachine_Straight:
000092 7c00                      		MOV Temp1,SREG2
000093 3000                      		ANDI Temp1,0b11000000
000094 f149                      		CPI Temp1,(Straight<<State0)
                                 		BREQ AutoEnd
000095 940e 0289                 
                                 		CALL StoreTrack
000097 2f06                      
000098 730f                      		MOV Temp1, SREG2
000099 6000                      		ANDI Temp1, 0b00111111
00009a 2f60                      		ORI Temp1, (Straight<<State0)
                                 		MOV SREG2, Temp1
00009b e32f                      
00009c 940e 0250                 		LDI Arg, LED_Straight
00009e 940c 00be                 		CALL SetLED
                                 		JMP AutoEnd
                                 
0000a0 2f06                      		StateMachine_Turn1:
0000a1 7c00                      		MOV Temp1,SREG2
0000a2 3400                      		ANDI Temp1,0b11000000
0000a3 f0d1                      		CPI Temp1,(Turn1<<State0)
                                 		BREQ AutoEnd
0000a4 940e 0289                 
                                 		CALL StoreTrack
0000a6 2f06                      
0000a7 730f                      		MOV Temp1, SREG2
0000a8 6400                      		ANDI Temp1, 0b00111111
0000a9 2f60                      		ORI Temp1, (Turn1<<State0)
                                 		MOV SREG2, Temp1
0000aa e023                      
0000ab 940e 0250                 		LDI Arg, LED_Turn1
0000ad 940c 00be                 		CALL SetLED
                                 		JMP AutoEnd
                                 
0000af 2f06                      		StateMachine_Turn2:
0000b0 7c00                      		MOV Temp1,SREG2
0000b1 3800                      		ANDI Temp1,0b11000000
0000b2 f059                      		CPI Temp1,(Turn2<<State0)
                                 		BREQ AutoEnd
0000b3 940e 0289                 
                                 		CALL StoreTrack
0000b5 2f06                      
0000b6 730f                      		MOV Temp1, SREG2
0000b7 6800                      		ANDI Temp1, 0b00111111
0000b8 2f60                      		ORI Temp1, (Turn2<<State0)
                                 		MOV SREG2, Temp1
0000b9 e128                      
0000ba 940e 0250                 		LDI Arg, LED_Turn2
0000bc 940c 00be                 		CALL SetLED
                                 		JMP AutoEnd
                                 
                                 AutoEnd:
0000be 940c 007b                 
                                 JMP Auto
                                 
0000c0 e000                      DrivingInit:
0000c1 bd03                      	LDI Temp1,0
                                 	OUT OCR2,Temp1
0000c2 e029                      
0000c3 940e 0250                 	LDI Arg,0b1001
                                 	CALL SetLED
0000c5 940e 0289                 
                                 	CALL StoreTrack
0000c7 93f0 0002                 
0000c9 93e0 0003                 	STS DataSpace_ZMaxH, ZH
                                 	STS DataSpace_ZMaxL, ZL
                                 
0000cb e0e0                      	ResetZ:
0000cc e0f2                      	LDI ZL, LOW(ZStart)
                                 	LDI ZH, HIGH(ZStart)
                                 
0000cd 995f                      Driving:
0000ce c04e                      	SBIC UCSRA,RXC	
                                 	RJMP UAuto
0000cf 9101                      
0000d0 9300 0005                 	LD Temp1, Z+
                                 	STS DataSpace_StoredDistL, Temp1
0000d2 9101                      
0000d3 9300 0004                 	LD Temp1, Z+
                                 	STS DataSpace_StoredDistH, Temp1
0000d5 2f20                      
0000d6 7c20                      	MOV Arg, Temp1
                                 	ANDI Arg, 0b11000000
0000d7 940e 0109                 	
                                 	CALL CalcOffset
0000d9 940e 00fa                 
                                 	CALL StateVel
0000db 9100 0004                 
0000dd 9110 0005                 	LDS Temp1,DataSpace_StoredDistH
                                 	LDS Temp2,DataSpace_StoredDistL
0000df 1770                      	Driving_Wait:
0000e0 f3f0                      	CP DistH, Temp1
                                 	BRLO Driving_Wait
0000e1 1781                      
0000e2 f3e0                      	CP DistL, Temp2
                                 	BRLO Driving_Wait
0000e3 3020                      
0000e4 f499                      	CPI Arg,(Straight<<State0)
                                 	BRNE Driving_Turn
                                 
0000e5 9ac0                      	Driving_Straight:;Der er kørt den totale længde - Offset
                                 	SBI PORTB, 0
                                 	
0000e6 9120 0009                 	;Sætter hastighed til Velocity_Turn 
0000e8 940e 01bf                 	LDS Arg, DataSpace_Velocity_Turn 
                                 	CALL SetSpeed
                                 
0000ea 9100 000a                 	;Trakker offset fra den kørte distace 
0000ec 1b80                      	LDS Temp1, DataSpace_Offset
0000ed 4070                      	SUB DistL, Temp1
                                 	SBCI DistH, 0
                                 
0000ee 9100 0004                 	;Venter på der er kørt den totale længde 
0000f0 9110 0005                 	LDS Temp1,DataSpace_StoredDistH
                                 	LDS Temp2,DataSpace_StoredDistL
0000f2 1770                      	Driving_Wait2:
0000f3 f3f0                      	CP DistH, Temp1
                                 	BRLO Driving_Wait2
0000f4 1781                      
0000f5 f3e0                      	CP DistL, Temp2
                                 	BRLO Driving_Wait2
0000f6 940c 00cd                 
                                 	JMP Driving
                                 
                                 	Driving_Turn:
0000f8 940c 00cd                 
                                 	JMP Driving
                                 
                                 ;Subroutines---------------------------------------
0000fa 930f                      StateVel:;Opdatere hastighed og elektromagnet
0000fb 3020                      	PUSH Temp1
0000fc f431                      	CPI Arg,(Straight<<State0)	;Tjekker hvilket state det er 
                                 	BRNE StateVel_Straight
0000fd 98c0                      	
                                 	CBI PORTB,0 ;Tænder for eletromagnet 
                                 
0000fe 9100 0009                 	;Sætter sving hastighed 
000100 bd03                      	LDS Temp1, DataSpace_Velocity_Turn
000101 910f                      	OUT OCR2, Temp1
000102 9508                      	POP Temp1
                                 	RET
                                 
000103 9ac0                      		StateVel_Straight:
                                 		SBI PORTB,0 ;Slukker for eletromagnet 
                                 
000104 9100 0008                 		;Sætter lige ud hastighed 
000106 bd03                      		LDS Temp1, DataSpace_Velocity_Straight
                                 		OUT OCR2, Temp1
000107 910f                      
000108 9508                      		POP Temp1
                                 		RET
                                 
000109 3020                      CalcOffset: ;Udregner evt. offset af distancen
00010a f489                      	CPI Arg,Straight
00010b 9100 0004                 	BRNE CalcOffset_Return
00010d 9110 0005                 	LDS Temp1,DataSpace_StoredDistH
                                 	LDS Temp2,DataSpace_StoredDistL
00010f 9506                      	;Dividere afstanden med 4
000110 9517                      	LSR Temp1
000111 9506                      	ROR Temp2
000112 9517                      	LSR Temp1
000113 9506                      	ROR Temp2
000114 9517                      	LSR Temp1
000115 9506                      	ROR Temp2
000116 9517                      	LSR Temp1
                                 	ROR Temp2
000117 9310 000a                 	;Ligger 1/4 af afstanden til Dist 
000119 0f81                      	STS DataSpace_Offset, Temp2
00011a e010                      	ADD DistL,Temp2
00011b 1f71                      	LDI Temp2,0
                                 	ADC DistH,Temp2
                                 
00011c 9508                      CalcOffset_Return:
                                 RET
                                 ;---------------------------------------
                                 
                                 UAuto:
                                 
                                 
                                 StartOfProto:
00011d 9b5f                      
00011e 940c 01a9                 SBIS UCSRA,RXC		;Tester bitten RXC, der viser, om mikrocontrolleren har modtaget en besked, i registeret UCSRA.
000120 b14c                      JMP EndOfProto		;Hvis RXC er 0, skal programmet hoppe over telegramfortolkningen.
                                 IN InBesked,UDR		;Hvis RXC er 1, skal programmet læse og fortolke dataen i UDR.
                                 
000121 9130 0000                 TypeCheck:
000123 3030                      	LDS Ret1, DataSpace_InType
000124 f421                      	CPI Ret1,0x00	;Tjekker om InType er tom.
000125 940e 0211                 	BRNE CmdCheck	;Hvis InType ikke er tom, hopper programmet til CmdCheck.
000127 940c 01a9                 	CALL IsType		;Hvis InType er tom, tjekker programmet om den modtagne besked i InBesked er en type med subroutinen IsType.
                                 	JMP EndOfProto	;Derefter hopper programmet videre til efter telegramfortolkningen og fortsætter i næste omgang i main-løkken.
                                 
000129 9130 0001                 CmdCheck:
00012b 3030                      	LDS Ret1, DataSpace_InCmd
00012c f4e9                      	CPI Ret1,0x00	;Tjekker om InCmd er tom.
00012d 940e 021b                 	BRNE DataCheckInter	;Hvis InCmd ikke er tom, hopper programmet til DataCheck.
00012f 9130 0000                 	CALL IsCmd		;Hvis InCmd derimod er tom, tjekker programmet om den modtagne besked i InBesked er en kommmando med subroutinen IsCom.
000131 3a3a                      	LDS Ret1, DataSpace_InType
000132 f0c9                      	CPI Ret1, Proto_GET	;Derefter sammenligner programmet InType, altså telegrammets type, med 0xAA, altså et 'get'-telegram.
                                 	BREQ IsGet		;Hvis telegramtypen er get, hopper programmet til IsGet.
                                 
                                 	;Indsæt nye typer over dette punkt.
                                 	
000133 9130 0001                 					;Hvis typen ikke er nogen af de ovenstående, antager programmet at typen er 0x55, altså et 'set'-telegram. 
000135 3135                      	LDS Ret1, DataSpace_InCmd
000136 f079                      	CPI Ret1, Proto_PWMStop
000137 3130                      	BREQ CmdCheck_PWMStop
000138 f1b9                      	CPI Ret1, Proto_Start	;Programmet sammenligner telegrammets kommando med 0x10, altså 'start' eller 'hastighed'.
000139 3132                      	BREQ EndOfProtoInter	;Hvis kommandoen er 0x10, hopper programmet til slutningen af protokollen, så dataen til telegrammet 0x55, 0x10 kan hentes i næste omgang i løkken.
00013a f1a9                      	CPI Ret1, Proto_PWMPre	;Programmet sammenligner telegrammets kommando med 0x12, altså PWM'ens prescaler.
00013b 3133                      	BREQ EndOfProtoInter ;Hvis kommandoen er 0x12, hopper programmet til slutningen af protokollen, så dataen til telegrammet 0x55, 0x12 kan hentes i næste omgang i løkken.
00013c f199                      	CPI Ret1, Proto_AccRef
00013d 3134                      	BREQ EndOfProtoInter
00013e f189                      	CPI Ret1, Proto_RGBLED
                                 	BREQ EndOfProtoInter
                                 	;Indsæt nye kommandoer over dette punkt. 
                                 	
00013f 940e 01ab                 					;Hvis kommandoen er ingen af de ovenstående, antager programmet at kommandoen er 0x11, altså kommandoen 'stop'.
000141 e120                      	CALL StopCar	;Kalder subroutinen StopCar, der sætter PWM'en til 0.
000142 940e 025a                 	LDI Arg, 0x10	
000144 940c 01a7                 	CALL PulseLED		;Tænder LED Værdien for at have modtaget et...
                                 	JMP CleanupEndOfProto	;Hopper til efter telegramfortolkningen.
                                 
000146 940e 01ab                 	CmdCheck_PWMStop:
000148 940c 01a7                 		CALL StopCar
                                 		JMP CleanupEndOfProto
                                 
00014a 940c 0176                 DataCheckInter:
                                 JMP DataCheck
                                 
00014c 9130 0001                 	IsGet:
00014e 3132                      		LDS Ret1, DataSpace_InCmd
00014f f061                      		CPI Ret1, Proto_PWMPre
000150 3133                      		BREQ CmdCheck_IsGet_IsFreq
000151 f0f1                      		CPI Ret1, Proto_AccRef
000152 3134                      		BREQ EndOfProtoInter
000153 f061                      		CPI Ret1, Proto_RGBLED
000154 3136                      		BREQ CmdCheck_IsGet_IsRGBLED
000155 f0a1                      		CPI Ret1, Proto_Track
000156 3130                      		BREQ CmdCheck_IsGet_Track
000157 f4d1                      		CPI Ret1, Proto_Start
000158 940e 01b5                 		BRNE Error			;Sætter fejl hvis typen 0x55 ikke er sat.
00015a 940c 01a7                 		CALL SendSpeed
                                 		JMP CleanupEndOfProto
                                 
00015c 940e 01c9                 		CmdCheck_IsGet_IsFreq:
00015e 940c 01a7                 			CALL SendPrescaler
                                 			JMP CleanupEndOfProto
                                 
000160 940e 0268                 		CmdCheck_IsGet_IsRGBLED:
000162 eb2b                      			CALL GetLED
000163 940e 01b1                 			LDI Arg,Proto_Reply
000165 2f23                      			CALL Send
000166 940e 01b1                 			MOV Arg,Ret1
000168 940c 01a7                 			CALL Send
                                 			JMP CleanupEndOfProto
                                 
00016a 940e 0291                 		CmdCheck_IsGet_Track:
00016c 940c 01a7                 			CALL SendTrack
                                 			JMP CleanupEndOfProto
                                 
00016e 940c 0176                 ;Dette er en mellem station til EndOfProto
                                 JMP	SkipEndOfProtoInter
000170 940c 01a9                 EndOfProtoInter:
                                 JMP EndOfProto
000172 940e 022d                 Error:
                                 	CALL Cleanup
000174 940c 01a9                 	;Indsæt hvad der ellers skal ske i Error her 
                                 	JMP EndOfProto
                                 SkipEndOfProtoInter:
                                 
000176 9130 0000                 DataCheck:
000178 3a3a                      	LDS Ret1, DataSpace_InType
000179 f099                      	CPI Ret1, Proto_GET
00017a 3535                      	BREQ GetWithData
00017b f7b1                      	CPI Ret1, Proto_SET
00017c 9130 0001                 	BRNE Error
00017e 3132                      	LDS Ret1, DataSpace_InCmd
00017f f0a9                      	CPI Ret1, Proto_PWMPre
000180 3133                      	BREQ SetFrequency
000181 f0e1                      	CPI Ret1, Proto_AccRef
000182 3134                      	BREQ SetAcceleration
000183 f0f1                      	CPI Ret1, Proto_RGBLED
000184 3130                      	BREQ SetRGBLED
000185 f761                      	CPI Ret1, Proto_Start
000186 940e 01bf                 	BRNE Error
000188 e026                      	CALL SetSpeed
000189 940e 025a                 	LDI Arg, LED_InCmd_Start	
00018b 940c 01a7                 	CALL PulseLED		;Tænder LED Værdien for at have modtaget et...
                                 	JMP CleanupEndOfProto
                                 
00018d 9130 0001                 	GetWithData:
00018f 3133                      		LDS Ret1, DataSpace_InCmd
000190 f709                      		CPI Ret1, Proto_AccRef
000191 940e 01fb                 		BRNE Error
000193 940c 01a7                 		CALL SendAccRef
                                 		JMP CleanupEndOfProto
                                 
000195 3048                      	SetFrequency:
000196 f6dc                      		CPI InBesked,8
000197 940e 01d5                 		BRGE Error
000199 e028                      		CALL SetPrescaler
00019a 940e 025a                 		LDI Arg, LED_InCmd_PWMPrescaler	
00019c 940c 01a7                 		CALL PulseLED		;Tænder LED Værdien for at have modtaget et...
                                 		JMP CleanupEndOfProto
                                 
00019e 940e 01de                 	SetAcceleration:
0001a0 940c 01a7                 		CALL SetAccRef
                                 		JMP CleanupEndOfProto
                                 
0001a2 2f24                      	SetRGBLED:
0001a3 940e 025a                 		MOV  Arg, InBesked
0001a5 940c 01a7                 		CALL PulseLED
                                 		JMP CleanupEndOfProto
                                 
                                 
0001a7 940e 022d                 CleanupEndOfProto:
                                 	CALL Cleanup
                                 EndOfProto:
0001a9 940c 011d                 
                                 JMP UAuto	;Hopper til starten af main
                                 
                                 ;Subroutines---------------------------------------
0001ab e000                      StopCar:
0001ac bd03                      	LDI Temp1,0			;
0001ad e027                      	OUT OCR2,Temp1		;Sætter bilens hastighed til 0%
0001ae 940e 025a                 	LDI Arg,LED_InCmd_Stop
0001b0 9508                      	CALL PulseLED
                                 	RET
                                 
0001b1 9b5d                      Send:
0001b2 cffe                      	SBIS UCSRA,UDRE		;Tjekker om der stadig er noget der er ved at blive sent ved at se om UDRE er "1" (hvilket den bliver når UDR (det register som indeholder der der bliver sendt) er tom)
0001b3 b92c                      	RJMP Send			;Hvis UDRE er "0", hopper den tilbage til Send:, og dermed venter på at UDR er tom.
0001b4 9508                      	OUT UDR,Arg		;Lægger Arg ind i den tomme UDR. Dermed vil Arg blive sendt.
                                 	RET					;Subroutinen er færdig, returnerer til adressen efter subroutinen blev kaldet fra. 
                                 
0001b5 eb2b                      SendSpeed:
0001b6 940e 01b1                 	LDI Arg, Proto_REPLY	;
0001b8 e120                      	CALL Send			;Sender Replytypen (0xBB)
0001b9 940e 01b1                 	LDI Arg,Proto_Start
0001bb b523                      	CALL Send
0001bc 940e 01b1                 	IN Arg,OCR2		;
0001be 9508                      	CALL Send			;Sender den nuværende hastighed 
                                 	RET
                                 
0001bf 3644                      SetSpeed:
0001c0 f029                      	CPI InBesked, 100	
0001c1 2f24                      	BREQ SetSpeed_MaxSpeed	;Hvis der er ønsket 100% hopper den 
0001c2 940e 0237                 	MOV Arg, InBesked
0001c4 bd33                      	CALL CalcOCR2		;Kalder en subrutine der udregner OCR2 (Dens resutat ligger i Ret1)
0001c5 9508                      	OUT OCR2,Ret1		;Sætter hastigheden på bilen til resultatet fra CalcOCR2.
                                 	RET
                                 
0001c6 ef0f                      	SetSpeed_MaxSpeed:
0001c7 bd03                      		LDI Temp1,0xFF	;Sætter hastigheden til maks 
0001c8 9508                      		OUT OCR2,Temp1
                                 		RET
                                 
0001c9 b505                      SendPrescaler:
0001ca 7007                      	IN Temp1,TCCR2
0001cb eb2b                      	ANDI Temp1,0b00000111
0001cc 940e 01b1                 	LDI Arg, Proto_REPLY
0001ce e122                      	CALL Send
0001cf 940e 01b1                 	LDI Arg,Proto_PWMPRe
0001d1 2f20                      	CALL Send
0001d2 940e 01b1                 	MOV Arg,Temp1
0001d4 9508                      	CALL Send
                                 	RET
                                 
0001d5 3048                      SetPrescaler:
0001d6 f430                      	CPI InBesked,8
0001d7 3040                      	BRSH SetPrescaler_Return
0001d8 f021                      	CPI InBesked,0
0001d9 b505                      	BREQ SetPrescaler_Return
0001da 7f08                      	IN Temp1,TCCR2
0001db 2b04                      	ANDI Temp1,0b11111000
0001dc bd05                      	OR Temp1,InBesked
                                 	OUT TCCR2,Temp1
0001dd 9508                      	SetPrescaler_Return:
                                 	RET
                                 
                                 
0001de fd40                      SetAccRef:
0001df 940c 01ee                 	SBRC InBesked,0
                                 	JMP SetAccRefN
0001e1 9546                      	;AccRefP
0001e2 e70f                      		LSR InBesked
0001e3 0f40                      		LDI Temp1,127
0001e4 2f94                      		ADD InBesked,Temp1
0001e5 2f29                      		MOV AccRefP, InBesked
0001e6 e000                      		MOV Arg, AccRefP
0001e7 e010                      		LDI Temp1, HIGH(EEPROM_AccRefP)
0001e8 940e 023f                 		LDI Temp2, LOW(EEPROM_AccRefP)
0001ea e024                      		CALL SaveInEEPROM
0001eb 940e 025a                 		LDI Arg, LED_InCmd_AccRefP	
0001ed 9508                      		CALL PulseLED		;Tænder LED Værdien for at have modtaget et AccRefP
                                 	RET
                                 
0001ee 9546                      	SetAccRefN:
0001ef e70f                      		LSR InBesked
0001f0 1b04                      		LDI Temp1,127
0001f1 2fa0                      		SUB Temp1,InBesked
0001f2 2f2a                      		MOV AccRefN, Temp1
0001f3 e000                      		MOV Arg, AccRefN
0001f4 e011                      		LDI Temp1, HIGH(EEPROM_AccRefN)
0001f5 940e 023f                 		LDI Temp2, LOW(EEPROM_AccRefN)
0001f7 e025                      		CALL SaveInEEPROM
0001f8 940e 025a                 		LDI Arg, LED_InCmd_AccRefN	
0001fa 9508                      		CALL PulseLED		;Tænder LED Værdien for at have modtaget et AccRefN
                                 	RET
                                 
0001fb 3041                      SendAccRef:
0001fc f051                      	CPI InBesked,1
0001fd eb2b                      	BREQ SendAccRefN
0001fe 940e 01b1                 	LDI Arg, Proto_REPLY
000200 e123                      	CALL Send
000201 940e 01b1                 	LDI Arg,Proto_AccRef
000203 2f29                      	CALL Send
000204 940e 01b1                 	MOV Arg, AccRefP
000206 9508                      	CALL Send
                                 	RET
                                 
000207 eb2b                      	SendAccRefN:
000208 940e 01b1                 	LDI Arg, Proto_REPLY
00020a e123                      	CALL Send
00020b 940e 01b1                 	LDI Arg,Proto_AccRef
00020d 2f2a                      	CALL Send
00020e 940e 01b1                 	MOV Arg, AccRefN
000210 9508                      	CALL Send
                                 	RET
                                 
000211 3545                      IsType:
000212 f029                      	CPI InBesked, Proto_SET
000213 3a4a                      	BREQ wasType
000214 f019                      	CPI InBesked, Proto_GET
000215 3b4b                      	BREQ wasType
000216 f009                      	CPI InBesked, Proto_REPLY
                                 	BREQ wasType
                                 	
                                 	;INDSÆT NYE TELEGRAMTYPER
000217 9508                      
                                 	RET
                                 
000218 9340 0000                 	wasType:
00021a 9508                      		STS DataSpace_InType, InBesked
                                 		RET
                                 
00021b 3140                      IsCmd:
00021c f069                      	CPI InBesked, Proto_Start		;0x10
00021d 3141                      	BREQ wasCommand
00021e f059                      	CPI InBesked, Proto_Stop		;0x11
00021f 3142                      	BREQ wasCommand
000220 f049                      	CPI InBesked, Proto_PWMPre		;0x12
000221 3143                      	BREQ wasCommand
000222 f039                      	CPI InBesked, Proto_AccRef		;0x13
000223 3144                      	BREQ wasCommand
000224 f029                      	CPI InBesked, Proto_RGBLED		;0x14
000225 3145                      	BREQ wasCommand
000226 f019                      	CPI InBesked, Proto_PWMStop		;0x15
000227 3146                      	BREQ wasCommand
000228 f009                      	CPI InBesked, Proto_Track		;0x16
                                 	BREQ wasCommand
                                 
                                 	;INDSÆT NYE TELEGRAMKOMMANDOER.
000229 9508                      
                                 	RET
                                 
00022a 9340 0001                 	wasCommand:
00022c 9508                      		STS DataSpace_InCmd, InBesked
                                 		RET
                                 
                                 Cleanup:
00022d e020                      	;Renser Intype
00022e 9320 0000                 	LDI Arg,0
                                 	STS DataSpace_InType, Arg
000230 9320 0001                 	;Renser InCmd
                                 	STS DataSpace_InCmd, Arg
000232 e040                      	;Renser InBesked
000233 e000                      	LDI InBesked,0
000234 e010                      	LDI Temp1, 0
000235 e030                      	LDI Temp2, 0
                                 	LDI Ret1, 0
                                 
                                 	;Hvis der er flere der skal renses så ind her
000236 9508                      
                                 	RET
                                 
                                 CalcOCR2:
000237 ea03                      	;Udregner værdien til OCR2 med denne formel OCR2=(Hastighed i %)*2,55
000238 9f20                      	LDI Temp1,0b10100011		;2.55 som Q2.6 format
000239 0c00                      	MUL Arg, Temp1				;Resutat ligger i R1:R0 på format Q10.6 (maksimalt 6.6, 100 -> 0b11 1111 1010 1100)
00023a 1c11                      	LSL R0
00023b 0c00                      	ROL R1						;Resutat er nu på format Q7.5
00023c 1c11                      	LSL R0
00023d 2d31                      	ROL R1						;Resutat er nu på format Q8.6
00023e 9508                      	MOV Ret1, R1
                                 RET
                                 
                                 SaveInEEPROM:
00023f 99e1                      	;Gemmer data i EEPROM	
000240 cffe                      	SBIC EECR, EEWE			;Tjekker om EEPROM er klar til at bruges 
000241 bb0f                      	RJMP SaveInEEPROM
000242 bb1e                      	OUT EEARH, Temp1		;Sætter lokationen i EEPROM 
000243 bb2d                      	OUT EEARL, Temp2		;Sætter lokationen i EEPROM
000244 94f8                      	OUT EEDR, Arg	;Giver EEPROM den som skal gemmes
000245 9ae2                      	CLI						;Stoper for intarups da de næste to ikke må forstyres 
000246 9ae1                      	SBI EECR, EEMWE			;Sætter Master Write til
000247 9478                      	SBI EECR, EEWE			;Sætter write igang 
000248 9508                      	SEI						;Starter intarups igen 
                                 RET
                                 
                                 
                                 LoadFromEEPROM:
000249 99e1                      	;Indhenter data fra EEPROM
00024a cffe                      	SBIC EECR, EEWE			;Tjekker om EEPROM er klar til at bruges 
00024b bb0f                      	RJMP LoadFromEEPROM
00024c bb1e                      	OUT EEARH, Temp1		;Sætter lokationen i EEPROM 
00024d 9ae0                      	OUT EEARL, Temp2		;Sætter lokationen i EEPROM
00024e b33d                      	SBI EECR, EERE			;Sætter Read til 
00024f 9508                      	IN Ret1, EEDR		;Henter hvad der er i EEPROM ned i Ret1
                                 RET
                                 
                                 SetLED:
000250 fd63                      	;Sætter en bestem LED værdi hvis der ikke er en PulseLED igang
000251 c007                      	SBRC SREG2, LEDTimeOn
000252 3420                      	RJMP EndOfSetLED
000253 f428                      	CPI Arg,64
000254 0f22                      	BRSH ERROREndOfSetLED	;Så hvis værdigen i LEDVerdi ikke svare til en værdig til LED'eren er der en fejl
000255 b30b                      	LSL Arg				;Rykker LED infoen en til venstre for at der kommer til at passe med hvor de er sat på 
000256 7801                      	IN Temp1, PORTA			;Loader PORTA ind for at undgå kompliktation med ADC
000257 2b02                      	ANDI Temp1, 0b10000001	;Udmasker alt andet end bit 0 og 7 for ikke at ændre værdiger for ADC og ubrugt pin 7 
000258 bb0b                      	OR Temp1, Arg			;or'er den værdi som skal være på LED'eren sammen med det der allerede var på PORTA
                                 	OUT	PORTA, Temp1		;Sender den nye værdig ud på PORTA
                                 	ERROREndOfSetLED:
000259 9508                      	EndOfSetLED:
                                 RET
                                 
                                 PulseLED:
                                 	;Lyser med en LED værdi i et sekundt 
00025a 3420                      	;Tjekker om LEDVerdi er gyldig
00025b f458                      	CPI Arg,64
00025c 6063                      	BRSH ErrorPulseLED	;Så hvis værdigen i LEDVerdi ikke svare til en værdig til LED'eren er der en fejl
                                 	SBR SREG2, LEDTimeOn ;Sikre at LED'er ikke kan ændres på nær ved at kalde LED1Sek igen inden 1 sek 
00025d 0f22                      	;Tænder LED'er med værdi
00025e b31b                      	LSL Arg				;Rykker LED infoen en til venstre for at der kommer til at passe med hvor de er sat på 
00025f 7811                      	IN Temp2, PORTA			;Loader PORTA ind for at undgå kompliktation med ADC
000260 2b12                      	ANDI Temp2, 0b10000001	;Udmasker alt andet end bit 0 og 7 for ikke at ændre værdiger for ADC og ubrugt pin 7 
000261 bb1b                      	OR Temp2, Arg			;or'er den værdi som skal være på LED'eren sammen med det der allerede var på PORTA
                                 	OUT	PORTA, Temp2		;Sender den nye værdig ud på PORTA
000262 e000                      	;Timer1 start (Den er på 1 sek)
000263 bd0d                      	LDI Temp1,0
000264 bd0c                      	OUT TCNT1H, Temp1
000265 e00d                      	OUT TCNT1L, Temp1
000266 bd0e                      	LDI Temp1, (1<<WGM12)|(1<<CS12)|(1<<CS10)	;CTC, pre 1024 og tænder for timer1 som er sat til 1 sek
                                 	OUT TCCR1B, Temp1 
000267 9508                      ErrorPulseLED:
                                 RET
                                 
                                 GetLED:
000268 b33b                      	;Indhenter LED værdien 
000269 773e                      	IN Ret1, PORTA			;Loader PORTA ind 
00026a 9536                      	ANDI Ret1, 0b01111110	;Udmasker bit 0 og 7 
00026b 9508                      	LSR Ret1				;Rykker Ret1 en til højre så det passer med at LED verdi er mellem 0 og 63 
                                 RET
                                 
                                 ChangeState:
00026c 940e 0289                 	;Gemmer og ændre state
00026e 2f06                      	CALL StoreTrack
00026f 7300                      	MOV Temp1, SREG2
000270 0f00                      	ANDI Temp1, 0b00110000
000271 0f00                      	LSL Temp1
000272 736f                      	LSL Temp1
000273 2b60                      	ANDI SREG2, 0b00111111
                                 	OR SREG2, Temp1
000274 940e 0277                 	;Midertidigt
                                 	CALL StateLED
000276 9508                      	;
                                 RET
                                 
                                 StateLED:
000277 2f06                      	;Ændre LED'eren til at lyse efter hvilket state der er
000278 7c00                      	MOV Temp1, SREG2
000279 3400                      	ANDI Temp1, 0b11000000
00027a f031                      	CPI Temp1, (Turn1<<State0)
00027b 3800                      	BREQ Turn1StateLED
00027c f041                      	CPI Temp1, (Turn2<<State0)
                                 	BREQ Turn2StateLED
00027d e32f                      	StraightStateLED:
00027e 940e 0250                 	LDI Arg, LED_Straight
000280 9508                      	CALL SetLED
                                 	RET
000281 e023                      	Turn1StateLED:
000282 940e 0250                 	LDI Arg, LED_Turn1
000284 9508                      	CALL SetLED
                                 	RET
000285 e128                      	Turn2StateLED:
000286 940e 0250                 	LDI Arg, LED_Turn2
000288 9508                      	CALL SetLED
                                 	RET
                                 
                                 StoreTrack:
000289 2f06                      	;Gemmer banestykket med hvilket state det er. 
00028a 7c00                      	MOV Temp1, SREG2
00028b 2b70                      	ANDI Temp1,0b11000000
00028c 9371                      	OR DistH, Temp1
00028d 9381                      	ST Z+, DistH
00028e e070                      	ST Z+, DistL
00028f e080                      	LDI DistH,0
000290 9508                      	LDI DistL,0
                                 RET
                                 
                                 SendTrack:
000291 940e 01ab                 	;Sender den opmålte bane 
000293 eb2b                      	CALL StopCar
000294 940e 01b1                 	LDI Arg, Proto_REPLY
000296 94f8                      	CALL Send
000297 2f0f                      	CLI
000298 2f1e                      	MOV Temp1, ZH
000299 e0f2                      	MOV Temp2, ZL
00029a e0e0                      	LDI ZH, HIGH(ZStart)
                                 	LDI ZL, LOW(ZStart)
                                 	;Tjekker om enden er nået 
00029b 17f0                      	ZTjek:
00029c f428                      		CP ZH, Temp1
                                 		BRSH ZTjek2
00029d 9121                      	ZTjek2B:
00029e 940e 01b1                 		LD Arg, Z+
0002a0 940c 029b                 		CALL Send
                                 		JMP ZTjek
0002a2 17e1                      	ZTjek2:
0002a3 f3c8                      		CP ZL, Temp2
0002a4 9478                      		BRLO ZTjek2B
0002a5 9508                      		SEI
                                 RET
                                 
                                 
0002a6 94e8                      AvgAcc:	
0002a7 0fc5                      	CLT
0002a8 e000                      	ADD AccSumL, AccData
0002a9 1fb0                      	LDI Temp1,0
                                 	ADC AccSumH, Temp1
                                 
0002aa 3fdf                      	;Hvis tælleren er nået 255, altså 256 additioner, skal programmet gå til den sidste del af udregningen.
0002ab f019                      	CPI DivCounter, 255
                                 	BREQ AvgAccRet 
0002ac 95d3                      
0002ad 940c 02b3                 	INC DivCounter
                                 	JMP AvgAccEnd
                                 
                                 	AvgAccRet:
0002af 2f3b                      		;Flytter resultatet, AccSumH, til returregisteret.
                                 		MOV Ret1, AccSumH	;Der med divideres der med 256
                                 
0002b0 e0d0                      		;Nulstiller tæller og variabler.
0002b1 e0b0                      		LDI DivCounter, 0
0002b2 e0c0                      		LDI AccSumH, 0
                                 		LDI AccSumL, 0
0002b3 9508                      AvgAccEnd:
                                 RET 
                                 
                                 ;Intarups -----------------------------------------------------------------
                                 
                                 ADCDone:				
0002b4 b154                      	;Når en ADC er færdig hopper den hertil
0002b5 b155                      	IN	AccData, ADCL		;Indlæser den lave del af ADC
0002b6 9a36                      	IN  AccData, ADCH		;Indlæser den høje del af ADC
0002b7 9468                      	SBI ADCSRA, ADSC	;Starter conversion igen 
0002b8 9518                      	SET	;Sætter T flaget højt for at vise der er en ny værdi 
                                 RETI
                                 
0002b9 930f                      Timer1CompereA:
                                 	PUSH Temp1
0002ba b31b                      	;Slukker LED'er
0002bb 7811                      	IN Temp2, PORTA			;Loader PORTA ind for at undgå kompliktation med ADC
0002bc bb1b                      	ANDI Temp2, 0b10000001	;Udmasker alt andet end bit 0 og 7 for ikke at ændre værdiger for ADC og ubrugt pin 7 
                                 	OUT	PORTA, Temp2		;Sender den nye værdig ud på PORTA som slukker alle LED'er
0002bd e000                      	;Stopper timer
0002be bd0e                      	LDI Temp1, 0			;Timer fra
0002bf 7f6c                      	OUT TCCR1B, Temp1		
0002c0 910f                      	CBR SREG2, LEDTimeOn
0002c1 9518                      	POP Temp1
                                 RETI
                                 
0002c2 930f                      InteDist:
                                 	PUSH Temp1
0002c3 e001                      	;Addere til den kørte afsatand
0002c4 0f80                      	LDI Temp1, 1
0002c5 e000                      	ADD DistL, Temp1
0002c6 1f70                      	LDI Temp1, 0
                                 	ADC DistH, Temp1
0002c7 910f                      	;---
0002c8 9518                      	POP Temp1
                                 RETI
                                 
                                 StregInterrupt:
0002c9 9300 0006                 	;Gemmer temp1 og temp2 i data space 
0002cb 9310 0007                 	STS DataSpace_Temp1,Temp1
                                 	STS DataSpace_Temp2,Temp2
0002cd 910f                      	;Sletter retunering adresse
0002ce 910f                      	POP Temp1
                                 	POP Temp1
0002cf 2f06                      	;Tjek om bit i reg er 0 hvilket vi få den til at skippe jmp 
0002d0 7007                      	MOV Temp1,SREG2
0002d1 3001                      	ANDI Temp1,0b000000111
0002d2 f051                      	CPI Temp1,1
0002d3 3002                      	BREQ StregInterrupt_1
0002d4 f091                      	CPI Temp1,2
                                 	BREQ StregInterrupt_2
0002d5 9563                      	;StregInterrupt_0
                                 		INC SREG2 ;Gør så næste gange er det StregInterrupt_1
0002d6 e706                      		;Giver en ny retunering adresse -> AutoInit
0002d7 930f                      		LDI Temp1, LOW(AutoInit)
0002d8 e000                      		PUSH Temp1
0002d9 930f                      		LDI Temp1, HIGH(AutoInit)
0002da 9100 0006                 		PUSH Temp1
0002dc 9518                      		LDS Temp1, DataSpace_Temp1
                                 		RETI
                                 
                                 	StregInterrupt_1:
0002dd 30e2                      		;Tjekker at der er kørt flere end 2 banestykker for at sikre det ikke er den "samme" streg 2 flere gange
0002de f0e0                      		CPI ZL,(LOW(ZStart) + 2)
0002df 9563                      		BRLO StregInterrupt_Return
                                 		INC SREG2 ;Gør så næste gange er det StregInterrupt_2
0002e0 ec00                      		;Giver en ny retunering adresse -> DrivingInit
0002e1 930f                      		LDI Temp1, LOW(DrivingInit)
0002e2 e000                      		PUSH Temp1
0002e3 930f                      		LDI Temp1, HIGH(DrivingInit)
                                 		PUSH Temp1
0002e4 9100 0006                 		;Henter Temp1 ind igen
0002e6 9518                      		LDS Temp1, DataSpace_Temp1
                                 		RETI
                                 
                                 	StregInterrupt_2:
0002e7 30e2                      		;Tjekker at der er kørt flere end 2 banestykker for at sikre det ikke er den "samme" streg 2 flere gange
0002e8 f090                      		CPI ZL,(LOW(ZStart)+2)
                                 		BRLO StregInterrupt_Return
0002e9 e0e0                      		;Nulstiller Z til bane start 
0002ea e0f2                      		LDI ZL, LOW(ZStart)
                                 		LDI ZH, HIGH(ZStart)
0002eb 9100 0008                 		;Sætter hastigheden op 
0002ed e015                      		LDS Temp1, DataSpace_Velocity_Straight
0002ee 0f01                      		LDI Temp2, 5
0002ef 9300 0008                 		ADD Temp1,Temp2
                                 		STS DataSpace_Velocity_Straight, Temp1
0002f1 9100 0009                 
0002f3 e015                      		LDS Temp1, DataSpace_Velocity_Turn
0002f4 0f01                      		LDI Temp2, 5
0002f5 9300 0009                 		ADD Temp1,Temp2
                                 		STS DataSpace_Velocity_Turn, Temp1
                                 		;---
0002f7 ec0b                      		;Giver en ny retunering adresse -> ResetZ
0002f8 930f                      		LDI Temp1, LOW(ResetZ)
0002f9 e000                      		PUSH Temp1
0002fa 930f                      		LDI Temp1, HIGH(ResetZ)
                                 		PUSH Temp1
                                 
0002fb 9100 0006                 StregInterrupt_Return:
0002fd 9110 0007                 LDS Temp1, DataSpace_Temp1


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega32A" register use summary:
x  :   0 y  :   0 z  :   5 r0 :   2 r1 :   3 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16: 178 r17:  38 r18:  53 r19:  43 r20:  28 
r21:   3 r22:  21 r23:   8 r24:   7 r25:   7 r26:   5 r27:   3 r28:   2 
r29:   4 r30:   9 r31:   7 
Registers used: 19 out of 35 (54.3%)

"ATmega32A" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   3 add   :   7 adiw  :   0 and   :   0 
andi  :  18 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   1 
brcc  :   0 brcs  :   0 break :   0 breq  :  35 brge  :   1 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   9 brlt  :   0 brmi  :   0 
brne  :  10 brpl  :   0 brsh  :   6 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :  62 cbi   :   1 cbr   :   1 
clc   :   0 clh   :   0 cli   :   2 cln   :   0 clr   :   0 cls   :   0 
clt   :   1 clv   :   0 clz   :   0 com   :   0 cp    :  10 cpc   :   0 
cpi   :  51 cpse  :   0 dec   :   0 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :  11 inc   :   3 jmp   :  33 
ld    :   3 ldd   :   0 ldi   :  93 lds   :  24 lpm   :   0 lsl   :   6 
lsr   :   7 mov   :  32 movw  :   0 mul   :   1 muls  :   0 mulsu :   0 
neg   :   0 nop   :   1 or    :   5 ori   :   3 out   :  37 pop   :   6 
push  :   9 rcall :   0 ret   :  32 reti  :   6 rjmp  :   7 rol   :   2 
ror   :   4 sbc   :   0 sbci  :   1 sbi   :  16 sbic  :   4 sbis  :   2 
sbiw  :   0 sbr   :   1 sbrc  :   2 sbrs  :   0 sec   :   0 seh   :   0 
sei   :   3 sen   :   0 ser   :   0 ses   :   0 set   :   1 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   2 std   :   0 sts   :  15 
sub   :   3 subi  :   0 swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 48 out of 113 (42.5%)

"ATmega32A" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000600   1454      0   1454   32768   4.4%
[.dseg] 0x000060 0x000060      0      0      0    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 4 warnings
